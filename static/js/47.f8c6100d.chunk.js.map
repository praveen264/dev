{"version":3,"sources":["views/pages/login/TestLogin.js"],"names":["config","bucketName","process","dirName","Date","region","accessKeyId","secretAccessKey","Formformi","props","useState","countryList","setCountryList","stateList","setStateList","cityList","setCityList","country_code","setCountry_code","stateName","setStateName","visible","setVisible","useEffect","EDU_AXIOS","get","then","response","data","map","country","value","text","name","catch","error","console","log","resp","state","state_code","respo","city","uploadLogo","file","a","uploadFile","err","openModalBox","setTimeout","closeModalBox","validationSchema","Yup","shape","min","max","required","matches","username","email","phone","test","val","replace","length","pin","address","password","repassword","oneOf","onSubmit","values","resetForm","logoVal","className","md","lg","xl","initialValues","website","logo","resource","formik","htmlFor","control","type","id","placeholder","rows","onChange","code","options","e","setFieldValue","target","files","block","color","onClick","icon","faTimesCircle","disabled","isSubmitting","dirty","isValid","style","marginLeft","faSave","onDismiss","to","faCheckCircle"],"mappings":"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","file":"static/js/47.f8c6100d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport EDU_AXIOS from \"src/helpers/edu_axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CRow,\r\n  CFormLabel,\r\n  CCardFooter,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CFormText,\r\n} from \"@coreui/react-pro\";\r\nimport {\r\n  faSave,\r\n  faTimesCircle,\r\n  faCheckCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { uploadFile } from \"react-s3\";\r\nimport Loader from \"src/loader/Loader\";\r\nimport EVMaskedControl from \"src/ev_masked_control/EVMaskedControl\";\r\nimport EVFormikControl from \"src/ev_formik_controls/EVFormikControl\";\r\n\r\nconst config = {\r\n  bucketName: process.env.REACT_APP_BUCKET_NAME,\r\n  dirName: process.env.REACT_APP_SCHOOL_LOGO_DIR_NAME + \"/\" + +new Date(),\r\n  region: process.env.REACT_APP_REGION,\r\n  accessKeyId: process.env.REACT_APP_ACCESS_ID,\r\n  secretAccessKey: process.env.REACT_APP_ACCESS_KEY,\r\n};\r\n\r\nconst Formformi = (props) => {\r\n  const [countryList, setCountryList] = useState([]);\r\n  const [stateList, setStateList] = useState([]);\r\n  const [cityList, setCityList] = useState([]);\r\n  const [country_code, setCountry_code] = useState(\"\");\r\n  const [stateName, setStateName] = useState(\"\");\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  // get country list from server\r\n  useEffect(() => {\r\n    EDU_AXIOS.get(process.env.REACT_APP_API_PATH + \"/auth/get-countries\")\r\n      .then((response) => {\r\n        let countryArray = response.data.data;\r\n\r\n        let data = countryArray.map((country) => {\r\n          return {\r\n            value: country.country_code,\r\n            text: country.name,\r\n          };\r\n        });\r\n        setCountryList(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  // get states of a country\r\n  useEffect(() => {\r\n    if (country_code != \"\") {\r\n      EDU_AXIOS.get(\r\n        process.env.REACT_APP_API_PATH + `/auth/get-states/${country_code}`\r\n      )\r\n        .then((resp) => {\r\n          let stateArray = resp.data.data;\r\n\r\n          let data = stateArray.map((state) => {\r\n            return {\r\n              value: state.state_code,\r\n              text: state.name,\r\n            };\r\n          });\r\n\r\n          setStateList(data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [country_code]);\r\n\r\n  // get cities of a state\r\n  useEffect(() => {\r\n    if (country_code != \"\" && stateName != \"\") {\r\n      EDU_AXIOS.get(\r\n        process.env.REACT_APP_API_PATH +\r\n          `/auth/get-cities/${country_code}/${stateName}`\r\n      )\r\n        //EDU_AXIOS.get(cityURL)\r\n        .then((respo) => {\r\n          let cityArray = respo.data.data;\r\n\r\n          let data = cityArray.map((city) => {\r\n            return {\r\n              value: city.name,\r\n              text: city.name,\r\n            };\r\n          });\r\n\r\n          setCityList(data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [stateName]);\r\n\r\n  // change country code on change\r\n  const fCountryCode = (code) => {\r\n    setTimeout(() => setCountry_code(code), 0);\r\n  };\r\n\r\n  // change state name on change\r\n  const fSatateNmae = (name) => {\r\n    setTimeout(() => setStateName(name), 0);\r\n  };\r\n\r\n  let uploadLogo = async (file) => {\r\n    uploadFile(file, config)\r\n      .then((data) => console.log(data, \"Logo uploaded successfully\"))\r\n      .catch((err) => console.error(err, \"\"));\r\n  };\r\n\r\n  // open cancle modal box\r\n  let openModalBox = () => {\r\n    setTimeout(() => setVisible(true), 0);\r\n  };\r\n\r\n  // close cancle modal box\r\n  let closeModalBox = () => {\r\n    setTimeout(() => setVisible(false), 0);\r\n  };\r\n\r\n  // formik params\r\n  const initialValues = {\r\n    name: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    repassword: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    pin: \"\",\r\n    country: \"\",\r\n    state: \"\",\r\n    city: \"\",\r\n    website: \"\",\r\n    logo: \"\",\r\n    logoVal: [],\r\n    resource: [],\r\n  };\r\n  // validation rules of the form fields\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(3, \"Name must have at least 3 characters\")\r\n      .max(15, \"Name is too long\")\r\n      .required(\"Name is required\")\r\n      .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \"),\r\n    username: Yup.string()\r\n      .min(3, \"Username must have at least 3 characters\")\r\n      .max(15, \"Username is too long\")\r\n      .required(\"Username is required\")\r\n      .matches(\r\n        /^[^@#]*[a-zA-Z0-9_.]+$/,\r\n        \"Only 'a-z,A-Z,0-9,undescre and dot' are allowed for this field \"\r\n      ),\r\n    email: Yup.string()\r\n      .email(\"Invalid email address\")\r\n      .required(\"Email is required\"),\r\n    phone: Yup.string()\r\n      .test(\"len\", \"Invalid phone number.\", (val) => {\r\n        const phl = !!val ? val.replace(/-|_/g, \"\").length : \"\";\r\n        return phl === 16;\r\n      })\r\n      .required(\"Phone is required\"),\r\n    country: Yup.string().required(\"Country name is required\"),\r\n    state: Yup.string().required(\"State name is required\"),\r\n    city: Yup.string().required(\"City name is required\"),\r\n    pin: Yup.string().required(\"Pincode is required\"),\r\n    address: Yup.string().required(\"Address is required\"),\r\n    password: Yup.string()\r\n      .min(6, \"Password must be at least 6 characters\")\r\n      .max(15, \"Password is too long\")\r\n      .required(\"Password is required\"),\r\n    repassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n  });\r\n  // submit form\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    await uploadLogo(values.logoVal);\r\n    console.log(\"Form Values\", values);\r\n    resetForm({ values: \"\" });\r\n  };\r\n\r\n  return (\r\n    <CCardGroup>\r\n      <CCard className=\"p-2\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol md=\"8\" lg=\"6\" xl=\"8\">\r\n              <h5>Create Chain School</h5>\r\n            </CCol>\r\n          </CRow>\r\n          <p className=\"text-muted\">Register a Chain School</p>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n          >\r\n            {(formik) => (\r\n              <Form className=\"row g-3\">\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"name\" className=\"required-field\">\r\n                    School Name\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    value={formik.values.name}\r\n                    placeholder=\"School Name\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"username\" className=\"required-field\">\r\n                    Username\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"username\"\r\n                    name=\"username\"\r\n                    id=\"username\"\r\n                    value={formik.values.username}\r\n                    placeholder=\"Username\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"password\" className=\"required-field\">\r\n                    Password\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    id=\"password\"\r\n                    value={formik.values.password}\r\n                    placeholder=\"Password\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"repassword\" className=\"required-field\">\r\n                    Re-enter Password\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"password\"\r\n                    name=\"repassword\"\r\n                    value={formik.values.repassword}\r\n                    id=\"repassword\"\r\n                    placeholder=\"Re-enter Password\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"email\" className=\"required-field\">\r\n                    Email\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    value={formik.values.email}\r\n                    placeholder=\"Email\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"phone\" className=\"required-field\">\r\n                    Mobile\r\n                  </CFormLabel>\r\n                  <EVMaskedControl\r\n                    control=\"phone\"\r\n                    name=\"phone\"\r\n                    id=\"phone\"\r\n                    value={formik.values.phone}\r\n                    placeholder=\"Mobile\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"address\" className=\"required-field\">\r\n                    Address\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"textarea\"\r\n                    name=\"address\"\r\n                    id=\"address\"\r\n                    placeholder=\"Address\"\r\n                    value={formik.values.address}\r\n                    rows=\"1\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"pin\" className=\"required-field\">\r\n                    Pincode\r\n                  </CFormLabel>\r\n                  <EVMaskedControl\r\n                    control=\"pincode\"\r\n                    name=\"pin\"\r\n                    id=\"pin\"\r\n                    value={formik.values.pin}\r\n                    placeholder=\"Pincode\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"country\" className=\"required-field\">\r\n                    Country\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"selectwithkey\"\r\n                    name=\"country\"\r\n                    id=\"country\"\r\n                    placeholder=\"Select country...\"\r\n                    onChange={fCountryCode(formik.values.country)}\r\n                    value={formik.values.country}\r\n                    options={countryList}\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"state\" className=\"required-field\">\r\n                    State\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"selectwithkey\"\r\n                    name=\"state\"\r\n                    id=\"state\"\r\n                    placeholder=\"Select state...\"\r\n                    value={formik.values.state}\r\n                    onChange={fSatateNmae(formik.values.state)}\r\n                    options={stateList}\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"city\" className=\"required-field\">\r\n                    City\r\n                  </CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"selectwithkey\"\r\n                    name=\"city\"\r\n                    id=\"city\"\r\n                    value={formik.values.city}\r\n                    options={cityList}\r\n                    placeholder=\"Select city...\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"website\">Website Of School</CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"text\"\r\n                    name=\"website\"\r\n                    value={formik.values.website}\r\n                    id=\"website\"\r\n                    placeholder=\"Example ==> www.websiteofschool.com\"\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"logo\">School Logo</CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"input\"\r\n                    type=\"file\"\r\n                    name=\"logo\"\r\n                    id=\"logo\"\r\n                    onChange={(e) => {\r\n                      formik.setFieldValue(\"logoVal\", e.target.files[0]);\r\n                    }}\r\n                  />\r\n                </CCol>\r\n\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"resource\">Share Resource</CFormLabel>\r\n                  <EVFormikControl\r\n                    control=\"checkbox\"\r\n                    name=\"resource\"\r\n                    value={formik.values.resource}\r\n                    id=\"resource\"\r\n                    options={[\r\n                      {\r\n                        text: \"Allow Sharing of Learning Resources With Other Branches\",\r\n                        value: \"1\",\r\n                      },\r\n                    ]}\r\n                  />\r\n                </CCol>\r\n                <CCardFooter>\r\n                  <CButton block color=\"light\" onClick={openModalBox}>\r\n                    <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                  </CButton>\r\n                  <CButton\r\n                    block\r\n                    color=\"dark\"\r\n                    type=\"submit\"\r\n                    disabled={\r\n                      formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                    }\r\n                    style={{ marginLeft: \"15px\" }}\r\n                  >\r\n                    {formik.isSubmitting ? (\r\n                      <Loader />\r\n                    ) : (\r\n                      <>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                      </>\r\n                    )}\r\n                  </CButton>\r\n                </CCardFooter>\r\n                <CModal visible={visible} onDismiss={closeModalBox}>\r\n                  <CModalHeader onDismiss={closeModalBox}>\r\n                    <CModalTitle>\r\n                      <h5>Cancel</h5>\r\n                    </CModalTitle>\r\n                  </CModalHeader>\r\n\r\n                  <CModalBody>Do You Want To Cancel ?</CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton color=\"light\" onClick={closeModalBox}>\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> No\r\n                    </CButton>\r\n                    <Link to=\"/\">\r\n                      <CButton color=\"dark\">\r\n                        <FontAwesomeIcon icon={faCheckCircle} /> Yes\r\n                      </CButton>\r\n                    </Link>\r\n                  </CModalFooter>\r\n                </CModal>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </CCardBody>\r\n      </CCard>\r\n    </CCardGroup>\r\n  );\r\n};\r\nexport default Formformi;\r\n"],"sourceRoot":""}