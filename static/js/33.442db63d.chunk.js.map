{"version":3,"sources":["views/ev_super_admin/subject_management/ev_all_subjects.js","loader/Loader.js","ev_formik_controls/TextError.js","ev_formik_controls/CheckBox.js","ev_formik_controls/Input.js","ev_formik_controls/MultiSelect.js","ev_formik_controls/RadioButton.js","ev_formik_controls/Select.js","ev_formik_controls/SelectWithKey.js","ev_formik_controls/Textarea.js","ev_formik_controls/EVFormikControl.js"],"names":["nature","text","value","all_subjects","props","getSubjects","EDU_AXIOS","get","process","then","resp","setState","subjects","data","catch","error","console","log","formValidationAddSubject","subject_name","state","isValid","errorsForAddSubject","test","Subjectrequired","trim","initialValues","subject_type","validationSchema","Yup","shape","required","onSubmit","values","resetForm","subject","created_by","loggedInUserId","self","post","created_for","res","modalVisibilityAddSubject","notify","message","validationSchemaEdit","subject_code","onSubmitEdit","subject_id","short_code","Edited_ShortCode","school_id","put","modalVisibilityEditSubject","errorsForEditSubject","errorsForEditSubjectCode","subject_deleted","JSON","parse","localStorage","getItem","uid","BlockSubject","handleAddSubjectSubmit","bind","this","event","preventDefault","e","url","delete","columns","title","field","render","status","color","visible","onDismiss","formik","className","md","htmlFor","control","type","name","id","placeholder","options","onClick","icon","faTimesCircle","disabled","isSubmitting","dirty","faSave","enableReinitialize","onChange","target","isSubjectExist","faQuestion","isCodeExist","mt","errors","touched","map","i","component","onSelectionChange","rows","setSelectedRows","search","paging","filtering","exportButton","actionsColumnIndex","rowStyle","x","tableData","backgroundColor","pageSize","emptyRowsWhenPaging","pageSizeOptions","actions","faPlusCircle","tooltip","isFreeAction","faEdit","style","fontSize","sort_code","faTrash","deleteSubjects","Component","Loader","role","TextError","children","connect","rest","switcher","getIn","touch","option","Fragment","checked","includes","label","handleChange","handleBlur","onBlur","useState","selected","setSelected","final","d","push","EVFormikControl","MultiSelect"],"mappings":"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","file":"static/js/33.442db63d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CForm,\r\n  CBadge,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CCol,\r\n  CRow,\r\n} from \"@coreui/react-pro\";\r\nimport {\r\n  faSave,\r\n  faEdit,\r\n  faTrash,\r\n  faPlusCircle,\r\n  faTimesCircle,\r\n  faQuestion,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport MaterialTable from \"material-table\";\r\nimport EDU_AXIOS from \"src/helpers/edu_axios\";\r\nimport notify from \"src/helpers/notify\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport EVFormikControl from \"src/ev_formik_controls/EVFormikControl\";\r\nimport Loader from \"src/loader/Loader\";\r\nlet nature = [\r\n  { text: \"Main Subject\", value: \"main\" },\r\n  { text: \"Optional Subject\", value: \"optional\" },\r\n  { text: \"Practical Subject\", value: \"practical\" },\r\n  { text: \"Elective-1\", value: \"elective1\" },\r\n  { text: \"Elective-2\", value: \"elective2\" },\r\n];\r\n\r\nclass all_subjects extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      subjects: [],\r\n      modalVisibilityAddSubject: false,\r\n      modalVisibilityEditSubject: false,\r\n      subject_name: \"\",\r\n      subject_type: \"\",\r\n      errorsForAddSubject: {},\r\n      errorsForEditSubject: {},\r\n      errorsForEditSubjectCode: {},\r\n      subject_deleted: null,\r\n      loggedInUserId: JSON.parse(localStorage.getItem(\"user\")).uid,\r\n      Edited_ShortCode: \"\",\r\n      BlockSubject: \"\",\r\n      subject_id: \"\",\r\n    };\r\n\r\n    this.handleAddSubjectSubmit = this.handleAddSubjectSubmit.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    // render data into table\r\n    this.getSubjects();\r\n  }\r\n\r\n  // get all subjects list\r\n  getSubjects = () => {\r\n    let url = process.env.REACT_APP_API_PATH + \"/sm/get-subjects/\";\r\n    EDU_AXIOS.get(url)\r\n      .then((resp) => {\r\n        this.setState({ subjects: resp.data.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // validation for add subject field\r\n  formValidationAddSubject = () => {\r\n    const { subject_name } = this.state;\r\n    let isValid = true;\r\n    const errorsForAddSubject = {};\r\n    if (!/^[A-Za-z]+$/.test(subject_name)) {\r\n      errorsForAddSubject.Subjectrequired = \"Invalid Subject Name\";\r\n      isValid = false;\r\n    }\r\n\r\n    this.setState({ errorsForAddSubject });\r\n    return isValid;\r\n  };\r\n\r\n  // validation for add subject field\r\n  formValidationAddSubject = () => {\r\n    const { subject_name } = this.state;\r\n    let isValid = true;\r\n    const errorsForAddSubject = {};\r\n    /*if (!/^[A-Za-z]+$/.test(subject_name)) {\r\n      errorsForAddSubject.Subjectrequired = \"Invalid Subject Name\";\r\n      isValid = false;\r\n    }*/\r\n    if (!subject_name.trim()) {\r\n      errorsForAddSubject.Subjectrequired = \" Required\";\r\n      isValid = false;\r\n    }\r\n\r\n    this.setState({ errorsForAddSubject });\r\n    return isValid;\r\n  };\r\n\r\n  // on click function + validation impose + Axios data\r\n  handleAddSubjectSubmit(event) {\r\n    event.preventDefault();\r\n    const isValid = this.formValidationAddSubject();\r\n    if (isValid) {\r\n      // Validation Check\r\n\r\n      let subject = this.state.subject_name;\r\n      let created_by = this.state.loggedInUserId;\r\n      let created_for = \"global\";\r\n      let self = this;\r\n\r\n      EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/create-subject\", {\r\n        subject,\r\n        created_by,\r\n        created_for,\r\n      })\r\n        .then((res) => {\r\n          self.getSubjects();\r\n          self.setState({ modalVisibilityAddSubject: false });\r\n          notify(\"success\", res.data.message);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  // formik params\r\n  initialValues = {\r\n    subject_name: \"\",\r\n    subject_type: \"\",\r\n  };\r\n  // validation rules of the form fields\r\n  validationSchema = Yup.object().shape({\r\n    subject_name: Yup.string().required(\"Subject name is required\"),\r\n    subject_type: Yup.string().required(\"Subject type is required\"),\r\n  });\r\n  // submit form\r\n  onSubmit = (values, { resetForm }) => {\r\n    let subject = values.subject_name;\r\n    let subject_type = values.subject_type;\r\n    let created_by = this.state.loggedInUserId;\r\n    let created_for = \"global\";\r\n    let self = this;\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/create-subject\", {\r\n      subject,\r\n      subject_type,\r\n      created_by,\r\n      created_for,\r\n    })\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        self.setState({ modalVisibilityAddSubject: false });\r\n        resetForm({ values: \"\" });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // formik params\r\n  // validation rules of the form fields\r\n  validationSchemaEdit = Yup.object().shape({\r\n    subject_name: Yup.string().required(\"Subject name is required\"),\r\n    subject_code: Yup.string().required(\"Short code is required\"),\r\n    subject_type: Yup.string().required(\"Subject type is required\"),\r\n  });\r\n  // submit form\r\n  onSubmitEdit = (values) => {\r\n    let subject_id = this.state.subject_id;\r\n    let short_code = this.state.Edited_ShortCode;\r\n    let created_for = this.state.school_id;\r\n    let subject = this.state.subject_name;\r\n    let subject_type = this.state.subject_type;\r\n    console.log(subject_type);\r\n    let self = this;\r\n    EDU_AXIOS.put(process.env.REACT_APP_API_PATH + \"/sm/edit-subject\", {\r\n      subject_id,\r\n      created_for,\r\n      short_code,\r\n      subject,\r\n      subject_type,\r\n    })\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        self.setState({\r\n          modalVisibilityEditSubject: false,\r\n        });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // to edit subject [Is-Subject-Exist]\r\n\r\n  isSubjectExist(event) {\r\n    event.preventDefault();\r\n\r\n    let subject = this.state.subject_name;\r\n    let self = this;\r\n\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/is-subject-exist\", {\r\n      subject,\r\n      created_for: \"global\",\r\n    })\r\n      .then((res) => {\r\n        self.setState({ subject_name: res.data.subject_name });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // to edit subject [Is-Code-Exist]\r\n\r\n  isCodeExist(event) {\r\n    event.preventDefault();\r\n\r\n    let short_code = this.state.Edited_ShortCode;\r\n\r\n    let self = this;\r\n\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/is-short-code-exist\", {\r\n      short_code,\r\n      created_for: \"global\",\r\n    })\r\n      .then((res) => {\r\n        self.setState({\r\n          short_code: res.data.Edited_ShortCode,\r\n        });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // to block subject only for the school\r\n\r\n  handleBlockSubject(event, subject_id) {\r\n    event.preventDefault();\r\n    console.log(\"Subject-ID-To-Block=\", subject_id);\r\n    let self = this;\r\n    EDU_AXIOS.put(\r\n      process.env.REACT_APP_API_PATH + \"/sm/block-unblock-subject\",\r\n      {\r\n        subject_id: subject_id,\r\n      }\r\n    )\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // Delete Subjects\r\n  deleteSubjects(e, subject_id) {\r\n    e.preventDefault();\r\n    console.log(\"Subject-ID-To-Delete\", subject_id);\r\n    let self = this;\r\n    let url =\r\n      process.env.REACT_APP_API_PATH + \"/sm/delete-subject/\" + subject_id;\r\n    EDU_AXIOS.delete(url)\r\n      .then((resp) => {\r\n        self.getSubjects();\r\n        notify(\"success\", resp.data.message);\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      subjects,\r\n      modalVisibilityAddSubject,\r\n      modalVisibilityEditSubject,\r\n      subject_name,\r\n      errorsForAddSubject,\r\n      Edited_ShortCode,\r\n      subject_type,\r\n    } = this.state;\r\n\r\n    const columns = [\r\n      {\r\n        title: \"Name\",\r\n        field: \"subject_name\",\r\n      },\r\n      {\r\n        title: \"Subject Code\",\r\n        field: \"sort_code\",\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        render: (data) => {\r\n          if (data.status == \"active\") {\r\n            return <CBadge color=\"success\">Active</CBadge>;\r\n          }\r\n          if (data.status == \"deactivated\") {\r\n            return <CBadge color=\"danger\">Inactive</CBadge>;\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: \"Type\",\r\n        field: \"nature\",\r\n      },\r\n    ];\r\n    return (\r\n      <CCard>\r\n        <CCardBody>\r\n          {/*Modal box to Add a Subject*/}\r\n          <CModal\r\n            visible={modalVisibilityAddSubject}\r\n            onDismiss={() =>\r\n              this.setState({ modalVisibilityAddSubject: false })\r\n            }\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({ modalVisibilityAddSubject: false })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Create Subject</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={this.initialValues}\r\n              validationSchema={this.validationSchema}\r\n              onSubmit={this.onSubmit}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CRow className=\"mb-3\">\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_name\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Name\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_name\"\r\n                          id=\"subject_name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_type\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Type\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"selectwithkey\"\r\n                          name=\"subject_type\"\r\n                          id=\"subject_type\"\r\n                          placeholder=\"Select subject type...\"\r\n                          options={nature}\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      color=\"light\"\r\n                      onClick={() =>\r\n                        this.setState({ modalVisibilityAddSubject: false })\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      value=\"Submit\"\r\n                      disabled={\r\n                        formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                      }\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n          {/*End modal to add subject*/}\r\n\r\n          {/* Start of Edit Subject Modal*/}\r\n          <CModal\r\n            visible={modalVisibilityEditSubject}\r\n            onDismiss={() =>\r\n              this.setState({ modalVisibilityEditSubject: false })\r\n            }\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({ modalVisibilityEditSubject: false })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Edit Subject</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={{\r\n                subject_name: subject_name,\r\n                subject_code: Edited_ShortCode,\r\n                subject_type: subject_type,\r\n              }}\r\n              validationSchema={this.validationSchemaEdit}\r\n              onSubmit={this.onSubmitEdit}\r\n              enableReinitialize={true}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CFormLabel\r\n                      htmlFor=\"subject_name\"\r\n                      className=\"required-field\"\r\n                    >\r\n                      Subject Name\r\n                    </CFormLabel>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CCol md={11}>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_name\"\r\n                          id=\"subject_name\"\r\n                          value={formik.values.subject_name}\r\n                          onChange={({ target }) => {\r\n                            this.setState({ subject_name: target.value });\r\n                          }}\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={1}>\r\n                        <CButton\r\n                          type=\"button\"\r\n                          color=\"dark\"\r\n                          id=\"button-addon2\"\r\n                          onClick={(e) => this.isSubjectExist(e)}\r\n                          data-toggle=\"tooltip\"\r\n                          data-placement=\"top\"\r\n                          title=\"Click to check subject name available or not\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faQuestion} />\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CInputGroup>\r\n                    <CFormLabel\r\n                      htmlFor=\"subject_code\"\r\n                      className=\"required-field\"\r\n                    >\r\n                      Short Code\r\n                    </CFormLabel>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CCol md={11}>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_code\"\r\n                          id=\"subject_code\"\r\n                          disabled=\"disabled\"\r\n                          value={formik.values.subject_code}\r\n                          onChange={({ target }) => {\r\n                            this.setState({ Edited_ShortCode: target.value });\r\n                          }}\r\n                          placeholder=\"Subject code\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={1}>\r\n                        <CButton\r\n                          type=\"button\"\r\n                          color=\"dark\"\r\n                          id=\"button-addon2\"\r\n                          onClick={(e) => this.isCodeExist(e)}\r\n                          data-toggle=\"tooltip\"\r\n                          data-placement=\"top\"\r\n                          title=\"Click to check short code available or not\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faQuestion} />\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CInputGroup>\r\n                    <CRow mt={3}>\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_type\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Type\r\n                        </CFormLabel>\r\n\r\n                        <Field name=\"subject_type\">\r\n                          {({ field }) => (\r\n                            <CFormSelect\r\n                              {...field}\r\n                              value={formik.values.subject_type}\r\n                              onChange={({ target }) => {\r\n                                this.setState({ subject_type: target.value });\r\n                              }}\r\n                              className={`form-control ${\r\n                                formik.errors.subject_type &&\r\n                                formik.touched.subject_type\r\n                                  ? \"is-invalid\"\r\n                                  : \"\"\r\n                              }`}\r\n                            >\r\n                              <option value=\"\">Select...</option>\r\n                              {nature.map((i) => (\r\n                                <option key={i.value} value={i.value}>\r\n                                  {i.text}\r\n                                </option>\r\n                              ))}\r\n                            </CFormSelect>\r\n                          )}\r\n                        </Field>\r\n                        <ErrorMessage\r\n                          name=\"subject_type\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      color=\"light\"\r\n                      onClick={() =>\r\n                        this.setState({ modalVisibilityEditSubject: false })\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      value=\"Submit\"\r\n                      disabled={formik.isSubmitting || !formik.isValid}\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n          {/*End modal to Edit subject*/}\r\n\r\n          {/*Render data into table*/}\r\n          <MaterialTable\r\n            title=\"All Subjects\"\r\n            data={subjects}\r\n            columns={columns}\r\n            onSelectionChange={(rows) => setSelectedRows(rows)}\r\n            options={{\r\n              search: true,\r\n              paging: true,\r\n              filtering: false,\r\n              exportButton: true,\r\n              actionsColumnIndex: -1,\r\n              rowStyle: (x) => {\r\n                if (x.tableData.id % 2) {\r\n                  return { backgroundColor: \"#f9f9f9\" };\r\n                }\r\n              },\r\n              pageSize: 15,\r\n              emptyRowsWhenPaging: true,\r\n              pageSizeOptions: [15, 30, 45],\r\n            }}\r\n            actions={[\r\n              {\r\n                icon: () => (\r\n                  <CButton\r\n                    color=\"dark\"\r\n                    onClick={() =>\r\n                      this.setState({ modalVisibilityAddSubject: true })\r\n                    }\r\n                  >\r\n                    {/* Action For Add Subject */}\r\n                    <FontAwesomeIcon icon={faPlusCircle} /> Add\r\n                  </CButton>\r\n                ),\r\n                tooltip: \"Add Subject\",\r\n                isFreeAction: true,\r\n              },\r\n\r\n              // {/* Action For Edit Subjects */}\r\n              (data) => ({\r\n                icon: () => (\r\n                  <FontAwesomeIcon\r\n                    icon={faEdit}\r\n                    style={{ fontSize: \"1rem\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        modalVisibilityEditSubject: true,\r\n                        Edited_ShortCode: data.sort_code,\r\n                        subject_name: data.subject_name,\r\n                        subject_id: data.subject_id,\r\n                        subject_type: data.nature,\r\n                      })\r\n                    }\r\n                  />\r\n                ),\r\n                tooltip: \"Edit Subject\",\r\n                onClick: \"\",\r\n              }),\r\n\r\n              // {/* Action For Delete Subjects */}\r\n              (data) => ({\r\n                icon: () => (\r\n                  <FontAwesomeIcon\r\n                    icon={faTrash}\r\n                    style={{ fontSize: \"1rem\" }}\r\n                    onClick={(e) => this.deleteSubjects(e, data.subject_id)}\r\n                  />\r\n                ),\r\n                tooltip: \"Delete Subject\",\r\n                onClick: \"\",\r\n                disabled: data.status === \"active\" ? false : true,\r\n              }),\r\n            ]}\r\n          />\r\n          {/*End table*/}\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport default all_subjects;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return <div className=\"spinner-border spinner-border-sm\" role=\"status\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nfunction TextError(props) {\r\n  return <div className=\"invalid-feedback\">{props.children}</div>;\r\n}\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst CheckBox = (props) => {\r\n  const { formik, name, options, switcher, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={\r\n                    field.value ? field.value.includes(option.value) : \"\"\r\n                  }\r\n                  label={option.text}\r\n                  disabled={option.disabled ? option.disabled : false}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}\r\n                  }`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(CheckBox);\r\n","import React from \"react\";\r\nimport { CFormInput } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Input(props) {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <CFormInput\r\n        id={id}\r\n        name={name}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        {...rest}\r\n        className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n      />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(Input);\r\n","import React, { useState } from \"react\";\r\nimport { CMultiSelect } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn, useField } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Multiselect = (props) => {\r\n  let { formik, name, id, options, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  const [selected, setSelected] = useState([]);\r\n  let final = [];\r\n  return (\r\n    <>\r\n      <Field name={name} id={id} onChange={handleChange} onBlur={handleBlur}>\r\n        {({ field }) => {\r\n          selected.map((d) => {\r\n            final.push(d.value);\r\n            return final;\r\n          });\r\n          formik.values[`${name}`] = final;\r\n\r\n          return (\r\n            <CMultiSelect\r\n              {...field}\r\n              {...rest}\r\n              options={options}\r\n              onChange={setSelected}\r\n              className={`form-control  ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Multiselect);\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst RadioButton = (props) => {\r\n  const { formik, name, options, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  type=\"radio\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value === option.value}\r\n                  label={option.text}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(RadioButton);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Select = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Select);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst SelectWithKey = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.text}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(SelectWithKey);\r\n","import React from \"react\";\r\nimport { CFormTextarea } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Textarea = (props) => {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormTextarea\r\n              id={id}\r\n              name={name}\r\n              {...field}\r\n              {...rest}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Textarea);\r\n","import React from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport Input from \"./Input\";\r\nimport MultiSelect from \"./MultiSelect\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Select from \"./Select\";\r\nimport SelectWithKey from \"./SelectWithKey\";\r\nimport Textarea from \"./Textarea\";\r\nfunction EVFormikControl(props) {\r\n  const { control, ...rest } = props;\r\n  switch (control) {\r\n    case \"input\":\r\n      return <Input {...rest} />;\r\n    case \"textarea\":\r\n      return <Textarea {...rest} />;\r\n    case \"select\":\r\n      return <Select {...rest} />;\r\n    case \"selectwithkey\":\r\n      return <SelectWithKey {...rest} />;\r\n    case \"multiselect\":\r\n      return <MultiSelect {...rest} />;\r\n    case \"radio\":\r\n      return <RadioButton {...rest} />;\r\n    case \"checkbox\":\r\n      return <CheckBox {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default EVFormikControl;\r\n"],"sourceRoot":""}