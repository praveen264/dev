{"version":3,"sources":["views/ev_super_admin/class_management/manage_sections.js","helpers/notify.js","helpers/edu_axios.js","views/navbars/ev_super_admin/nav_normal_school.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","loader/Loader.js","ev_formik_controls/TextError.js","ev_formik_controls/CheckBox.js","ev_formik_controls/Input.js","ev_formik_controls/MultiSelect.js","ev_formik_controls/RadioButton.js","ev_formik_controls/Select.js","ev_formik_controls/SelectWithKey.js","ev_formik_controls/Textarea.js","ev_formik_controls/EVFormikControl.js"],"names":["manage_sections","props","school_id","match","params","useState","visible","setVisible","gp","setGp","visibleSections","setVisibleSections","className","setClassName","sectionName","setSectionName","sectionData","setSectionData","teachers","setTeachers","useEffect","EDU_AXIOS","get","process","then","response","data","catch","error","console","log","getSections","name","showManageModal","validationSchema","Yup","shape","primary_teacher","required","max_strength","onSubmit","values","a","resetForm","post","class","section","secondary_teacher","strength","nickname","res","notify","message","err","id","md","lg","xl","el","push","groups","length","i","row","group_name","j","content","color","onClick","gp_classes","style","textAlign","Record","record","height","paddingTop","paddingBottom","backgroundColor","striped","scope","map","s","section_name","primary_class_teacher","secondary_class_teacher","icon","faCog","showSections","size","onDismiss","initialValues","formik","htmlFor","control","type","placeholder","options","block","faTimesCircle","disabled","isSubmitting","dirty","isValid","marginLeft","faSave","toast","require","module","exports","info","success","warn","dark","axios","default","token","localStorage","getItem","JSON","parse","create","timeout","headers","authorization","interceptors","use","status","removeItem","window","location","expand","colorScheme","float","fluid","href","variant","popper","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","Loader","role","TextError","children","connect","rest","switcher","getIn","errors","touch","touched","field","option","Fragment","checked","includes","label","text","component","handleChange","handleBlur","onChange","onBlur","selected","setSelected","final","d","EVFormikControl","MultiSelect"],"mappings":"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","file":"static/js/25.f60fe141.chunk.js","sourcesContent":["import {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CRow,\r\n  CFormLabel,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CTooltip,\r\n  CTable,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHeaderCell,\r\n} from \"@coreui/react-pro\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"../../navbars/ev_super_admin/nav_normal_school\";\r\nimport {\r\n  faCog,\r\n  faTimesCircle,\r\n  faSave,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Loader from \"src/loader/Loader\";\r\nimport EVFormikControl from \"src/ev_formik_controls/EVFormikControl\";\r\nimport EDU_AXIOS from \"src/helpers/edu_axios\";\r\nimport notify from \"src/helpers/notify\";\r\n\r\nconst manage_sections = (props) => {\r\n  let school_id = props.match.params.school_id;\r\n  let [visible, setVisible] = useState(false);\r\n  let [gp, setGp] = useState();\r\n  let [visibleSections, setVisibleSections] = useState(false);\r\n  let [className, setClassName] = useState();\r\n  let [sectionName, setSectionName] = useState();\r\n  let [sectionData, setSectionData] = useState([]);\r\n  let [teachers, setTeachers] = useState([]);\r\n\r\n  // const removeId = e.target.getAttribute(\"data-remove\");\r\n  // const removeId = e.target.attributes.getNamedItem(\"data-remove\").value;\r\n\r\n  useEffect(() => {\r\n    EDU_AXIOS.get(`${process.env.REACT_APP_API_PATH}/cm/get-class/${school_id}`)\r\n      .then((response) => {\r\n        setGp(response.data.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  let Record = () => {\r\n    let el = [];\r\n    el.push(\r\n      <CCol md={12}>\r\n        <h5>Classes</h5>\r\n      </CCol>\r\n    );\r\n    if (!!gp && gp.groups.length > 0) {\r\n      for (let i = 0; i < gp.groups.length; i++) {\r\n        let row = [];\r\n        row.push(\r\n          <CCol md={12} className=\"mb-2\" key={gp.groups[i].group_name}>\r\n            <b>{gp.groups[i].group_name}</b>\r\n          </CCol>\r\n        );\r\n        for (let j = 0; j < gp.groups[i].gp_classes.length; j++) {\r\n          row.push(\r\n            <CCol md={12} key={gp.groups[i].gp_classes[j]}>\r\n              <div class=\"d-grid gap-2\">\r\n                <CTooltip content=\"View sections\">\r\n                  <CButton\r\n                    color=\"light\"\r\n                    className=\"mb-2\"\r\n                    onClick={() => getSections(gp.groups[i].gp_classes[j])}\r\n                  >\r\n                    {gp.groups[i].gp_classes[j]}\r\n                  </CButton>\r\n                </CTooltip>\r\n              </div>\r\n            </CCol>\r\n          );\r\n        }\r\n        el.push(row);\r\n      }\r\n    } else {\r\n      el.push(\r\n        <CCol md={12} style={{ textAlign: \"center\" }}>\r\n          No record found...\r\n        </CCol>\r\n      );\r\n    }\r\n    return el;\r\n  };\r\n\r\n  // get sections by class\r\n  let getSections = (name) => {\r\n    setClassName(name);\r\n    EDU_AXIOS.get(\r\n      `${process.env.REACT_APP_API_PATH}/cm/get-sections-by-class/${school_id}/${name}`\r\n    )\r\n      .then((response) => {\r\n        setSectionData(response.data.data);\r\n        setVisibleSections(true);\r\n      })\r\n      .catch((error) => {\r\n        setSectionData([]);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // show sections\r\n  let showSections = () => {\r\n    let record = [];\r\n    record.push(\r\n      <CRow>\r\n        <CCol\r\n          md={12}\r\n          style={{\r\n            height: \"50px\",\r\n            paddingTop: \"10px\",\r\n            paddingBottom: \"10px\",\r\n            backgroundColor: \"#EBEDEF\",\r\n          }}\r\n        >\r\n          <b> Class - {className} </b>\r\n        </CCol>\r\n      </CRow>\r\n    );\r\n    if (sectionData.length != []) {\r\n      record.push(\r\n        <CRow className=\"mt-2\">\r\n          <CCol md={12}>\r\n            <CTable striped>\r\n              <CTableHead color=\"dark\">\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">Section</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Nickname</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">\r\n                    Primary Class Teacher\r\n                  </CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">\r\n                    Secondary Class Teacher\r\n                  </CTableHeaderCell>\r\n                  {/* <CTableHeaderCell scope=\"col\">Strength</CTableHeaderCell> */}\r\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {sectionData.map((s) => {\r\n                  return (\r\n                    <CTableRow key={s.section_name}>\r\n                      <CTableDataCell>{s.section_name}</CTableDataCell>\r\n                      <CTableDataCell>{s.nickname}</CTableDataCell>\r\n                      <CTableDataCell>{s.primary_class_teacher}</CTableDataCell>\r\n                      <CTableDataCell>\r\n                        {s.secondary_class_teacher}\r\n                      </CTableDataCell>\r\n                      {/* <CTableDataCell>{s.strength}</CTableDataCell> */}\r\n                      <CTableDataCell>\r\n                        <CTooltip content=\"manage\">\r\n                          <CButton\r\n                            color=\"light\"\r\n                            onClick={() => {\r\n                              showManageModal(className, s.section_name);\r\n                            }}\r\n                          >\r\n                            <FontAwesomeIcon icon={faCog} />\r\n                          </CButton>\r\n                        </CTooltip>\r\n                      </CTableDataCell>\r\n                    </CTableRow>\r\n                  );\r\n                })}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCol>\r\n        </CRow>\r\n      );\r\n    } else {\r\n      <CRow className=\"mt-2\">\r\n        <CCol md={12} style={{ textAlign: \"center\" }}>\r\n          No record found\r\n        </CCol>\r\n      </CRow>;\r\n    }\r\n\r\n    return record;\r\n  };\r\n\r\n  // manage section\r\n  let showManageModal = (className, sectionName) => {\r\n    EDU_AXIOS.get(\r\n      `${process.env.REACT_APP_API_PATH}/tm/get-teachers-by-class/${school_id}/${className}`\r\n    )\r\n      .then((response) => {\r\n        setSectionName(sectionName);\r\n        setTeachers(response.data.data);\r\n        setVisible(true);\r\n      })\r\n      .catch((error) => {\r\n        setTeachers([]);\r\n        setVisible(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // formik params\r\n  let initialValues = {\r\n    nickname: \"\",\r\n    primary_teacher: \"\",\r\n    secondary_teacher: \"\",\r\n    max_strength: \"\",\r\n  };\r\n\r\n  // validation rules of the form fields\r\n  const validationSchema = Yup.object().shape({\r\n    primary_teacher: Yup.string().required(\"Primary class teacher is required\"),\r\n    max_strength: Yup.string(),\r\n  });\r\n  // submit form\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    await EDU_AXIOS.post(\r\n      process.env.REACT_APP_API_PATH + \"/cm/manage-section\",\r\n      {\r\n        school_id: school_id,\r\n        class: className,\r\n        section: sectionName,\r\n        primary_teacher: values.primary_teacher,\r\n        secondary_teacher: values.secondary_teacher,\r\n        strength: values.max_strength,\r\n        nickname: values.nickname,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        resetForm({ values: \"\" });\r\n        notify(\"success\", res.data.message);\r\n        setVisible(false);\r\n        getSections(className);\r\n      })\r\n      .catch((err) => {\r\n        notify(\"error\", err);\r\n      });\r\n  };\r\n  return (\r\n    <CCardGroup>\r\n      <CCard className=\"p-2\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol>\r\n              <NavBar id={school_id} />\r\n            </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol md=\"8\" lg=\"6\" xl=\"8\">\r\n              <h5>Manage Sections</h5>\r\n            </CCol>\r\n          </CRow>\r\n          <p className=\"text-muted\">Manage sections</p>\r\n          <CRow>\r\n            <CCol md={2}>{Record()}</CCol>\r\n            <CCol md={10}>{visibleSections && showSections()}</CCol>\r\n          </CRow>\r\n\r\n          {/*Manage Section Modal box*/}\r\n          <CModal\r\n            size=\"lg\"\r\n            visible={visible}\r\n            onDismiss={() => setVisible(false)}\r\n          >\r\n            <CModalHeader onDismiss={() => setVisible(false)}>\r\n              <CModalTitle>\r\n                Manage Section [ {className} - {sectionName} ]\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CRow>\r\n                      <CCol md={6}>\r\n                        <CFormLabel htmlFor=\"nicknamae\">Nickname</CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"nickname\"\r\n                          id=\"nicknamae\"\r\n                          placeholder=\"Nickname\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={6}>\r\n                        <CFormLabel\r\n                          htmlFor=\"primary_teacher\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Primary Class Teacher\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"selectwithkey\"\r\n                          name=\"primary_teacher\"\r\n                          id=\"primary_teacher\"\r\n                          placeholder=\"Select teacher...\"\r\n                          options={teachers}\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"mt-2\">\r\n                      <CCol md={6}>\r\n                        <CFormLabel htmlFor=\"secondary_teacher\">\r\n                          Secondary Class Teacher\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"selectwithkey\"\r\n                          name=\"secondary_teacher\"\r\n                          id=\"secondary_teacher\"\r\n                          placeholder=\"Select teacher...\"\r\n                          options={teachers}\r\n                        />\r\n                      </CCol>\r\n                      {/* <CCol md={6}>\r\n                        <CFormLabel\r\n                          htmlFor=\"max_strength\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Max Strength\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"max_strength\"\r\n                          id=\"max_strength\"\r\n                          value={formik.values.max_strength}\r\n                          placeholder=\"Max Strength\"\r\n                        />\r\n                      </CCol> */}\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      block\r\n                      color=\"light\"\r\n                      onClick={() => setVisible(false)}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      block\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      disabled={\r\n                        formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                      }\r\n                      style={{ marginLeft: \"15px\" }}\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n\r\n          {/*End Manage section modal box*/}\r\n        </CCardBody>\r\n      </CCard>\r\n    </CCardGroup>\r\n  );\r\n};\r\nexport default manage_sections;\r\n","let { toast } = require(\"react-toastify\");\r\n\r\nconst notify = (type, message) => {\r\n  switch (type) {\r\n    case \"info\":\r\n      toast.info(message);\r\n      break;\r\n    case \"success\":\r\n      toast.success(message);\r\n      break;\r\n    case \"warning\":\r\n      toast.warn(message);\r\n      break;\r\n    case \"error\":\r\n      toast.error(message);\r\n      break;\r\n    case \"dark\":\r\n      toast.dark(message);\r\n      break;\r\n    default:\r\n      toast(message);\r\n  }\r\n};\r\n\r\nmodule.exports = notify;\r\n","const notify = require(\"./notify\");\r\nconst axios = require(\"axios\").default;\r\nlet EDU_AXIOS;\r\nlet token = \"\";\r\n// to set authorization header on test mode\r\nlet user = localStorage.getItem(\"user\");\r\nif (user) {\r\n  token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n}\r\nif (process.env.REACT_APP_APP_ENV == \"production\") {\r\n  EDU_AXIOS = axios.create({\r\n    timeout: 6000,\r\n    withCredentials: true,\r\n    credentials: \"include\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  /**\r\n   * Catch the AunAuthorized Request\r\n   */\r\n  EDU_AXIOS.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem(\"user\");\r\n        window.location = \"/#/login\";\r\n        notify(\"error\", error.response.message);\r\n      } else {\r\n        notify(\"error\", error.response.message);\r\n      }\r\n    }\r\n  );\r\n}\r\nif (process.env.REACT_APP_APP_ENV == \"test\") {\r\n  if (token == \"\") {\r\n    console.log(\"there isno token\");\r\n    EDU_AXIOS = axios.create({\r\n      timeout: 6000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  } else {\r\n    EDU_AXIOS = axios.create({\r\n      timeout: 6000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: \"Bearer \" + token,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Catch the AunAuthorized Request\r\n   */\r\n  EDU_AXIOS.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem(\"user\");\r\n        window.location = \"/#/login\";\r\n        console.log(error.response.data.message);\r\n        notify(\"error\", error.response.data.message);\r\n      } else {\r\n        notify(\"error\", error.response.data.message);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nmodule.exports = EDU_AXIOS;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CNavbar,\r\n  CNavbarToggler,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CContainer,\r\n  CCollapse,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n} from \"@coreui/react-pro\";\r\nexport default (props) => {\r\n  let id = props.id;\r\n  const [visible, setVisible] = useState(false);\r\n  return (\r\n    <>\r\n      <CNavbar\r\n        expand=\"\"\r\n        colorScheme=\"light\"\r\n        className=\"bg-secondry\"\r\n        style={{ float: \"right\" }}\r\n      >\r\n        <CContainer fluid>\r\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              <a color=\"secondary\" className=\"btn btn-default\"  href={`/#/school-management/get-users/${id}`}>User Management</a>\r\n            {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n            <CDropdownToggle color=\"secondary\" >\r\n                 User Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/user-management/${id}`}\r\n                  >\r\n                   Add Users\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/get-users/${id}`}\r\n                  >\r\n                   get Users\r\n                  </CDropdownItem>\r\n                  </CDropdownMenu>\r\n                  </CDropdown> */}\r\n                  <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\" >\r\n                  Class Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-classes/${id}`}\r\n                  >\r\n                    Create/Edit Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/view-classes/${id}`}\r\n                  >\r\n                    View Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-sections/${id}`}\r\n                  >\r\n                    Create Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/manage-sections/${id}`}\r\n                  >\r\n                    Manage Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                    Class Mapping\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Subject Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Add Subject\r\n                  </CDropdownItem> */}\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Assign Subject To Class\r\n                  </CDropdownItem>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                    All Subjects\r\n                  </CDropdownItem> */}\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n         \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Teacher Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                    Add Teacher\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Section Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Academic Calendar Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Academic Year\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Holiday calendar & holiday list\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    Exam calendar\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Lesson Planning\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/lesson-management/get-subjects/${id}`}\r\n                  >\r\n                   Annual Lesson Plan\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Class Structure Creation\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Constraints management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                 School level constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Class wise constraints (inflow from class teacher)\r\n                  </CDropdownItem>\r\n                 \r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n            \r\n             \r\n              {/*<CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Student Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Students</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Subjects</CDropdownItem>\r\n                </CDropdownMenu>\r\n  </CDropdown>*/}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Calender Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/add-holiday/${id}`}\r\n                  >\r\n                    Add Holiday\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/view-calender/${id}`}\r\n                  >\r\n                    View Calender\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n          \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">Time Table</CDropdownToggle>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Data fitness – system checks the fitness of data\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */} \r\n               \r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Generate Annual Timetable\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                <CDropdownMenu>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Update weekly time table.\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                  <CDropdownItem href={`/#/time-table-management/step-1/${id}`}>\r\n                    Time Table (Initialization)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/time-table-list/${id}`}\r\n                  >\r\n                    Time Table List\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>\r\n                    General Constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>Class Constraints</CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/create-time-table-admin/${id}`}\r\n                  >\r\n                    Generate Time Table (Admin)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/generate-time-table-school/${id}`}\r\n                  >\r\n                    Generate Time Table (School)\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n    </>\r\n  );\r\n};\r\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return <div className=\"spinner-border spinner-border-sm\" role=\"status\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nfunction TextError(props) {\r\n  return <div className=\"invalid-feedback\">{props.children}</div>;\r\n}\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst CheckBox = (props) => {\r\n  const { formik, name, options, switcher, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={\r\n                    field.value ? field.value.includes(option.value) : \"\"\r\n                  }\r\n                  label={option.text}\r\n                  disabled={option.disabled ? option.disabled : false}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}\r\n                  }`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(CheckBox);\r\n","import React from \"react\";\r\nimport { CFormInput } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Input(props) {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <CFormInput\r\n        id={id}\r\n        name={name}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        {...rest}\r\n        className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n      />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(Input);\r\n","import React, { useState } from \"react\";\r\nimport { CMultiSelect } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn, useField } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Multiselect = (props) => {\r\n  let { formik, name, id, options, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  const [selected, setSelected] = useState([]);\r\n  let final = [];\r\n  return (\r\n    <>\r\n      <Field name={name} id={id} onChange={handleChange} onBlur={handleBlur}>\r\n        {({ field }) => {\r\n          selected.map((d) => {\r\n            final.push(d.value);\r\n            return final;\r\n          });\r\n          formik.values[`${name}`] = final;\r\n\r\n          return (\r\n            <CMultiSelect\r\n              {...field}\r\n              {...rest}\r\n              options={options}\r\n              onChange={setSelected}\r\n              className={`form-control  ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Multiselect);\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst RadioButton = (props) => {\r\n  const { formik, name, options, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  type=\"radio\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value === option.value}\r\n                  label={option.text}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(RadioButton);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Select = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Select);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst SelectWithKey = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.text}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(SelectWithKey);\r\n","import React from \"react\";\r\nimport { CFormTextarea } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Textarea = (props) => {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormTextarea\r\n              id={id}\r\n              name={name}\r\n              {...field}\r\n              {...rest}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Textarea);\r\n","import React from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport Input from \"./Input\";\r\nimport MultiSelect from \"./MultiSelect\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Select from \"./Select\";\r\nimport SelectWithKey from \"./SelectWithKey\";\r\nimport Textarea from \"./Textarea\";\r\nfunction EVFormikControl(props) {\r\n  const { control, ...rest } = props;\r\n  switch (control) {\r\n    case \"input\":\r\n      return <Input {...rest} />;\r\n    case \"textarea\":\r\n      return <Textarea {...rest} />;\r\n    case \"select\":\r\n      return <Select {...rest} />;\r\n    case \"selectwithkey\":\r\n      return <SelectWithKey {...rest} />;\r\n    case \"multiselect\":\r\n      return <MultiSelect {...rest} />;\r\n    case \"radio\":\r\n      return <RadioButton {...rest} />;\r\n    case \"checkbox\":\r\n      return <CheckBox {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default EVFormikControl;\r\n"],"sourceRoot":""}