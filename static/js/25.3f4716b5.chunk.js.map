{"version":3,"sources":["views/ev_super_admin/subject_management/all_subjects.js","views/navbars/ev_super_admin/nav_normal_school.js","loader/Loader.js","ev_formik_controls/TextError.js","ev_formik_controls/CheckBox.js","ev_formik_controls/Input.js","ev_formik_controls/MultiSelect.js","ev_formik_controls/RadioButton.js","ev_formik_controls/Select.js","ev_formik_controls/SelectWithKey.js","ev_formik_controls/Textarea.js","ev_formik_controls/EVFormikControl.js"],"names":["nature","text","value","AllSubjects","props","getSubjects","url","process","state","school_id","EDU_AXIOS","get","then","resp","setState","subjects","data","catch","error","console","log","getSections","db_classes","length","i","j","sections","push","class","ev_classes","isShow","updateAssignedClasses","subject_id","assigned_classes","checkedItems","modalVisibilityUpdateAssignClass","initialValues","subject_name","subject_type","validationSchema","Yup","shape","required","onSubmit","values","resetForm","subject","created_by","loggedInUserId","created_for","self","post","res","modalVisibilityAddSubject","notify","message","validationSchemaEdit","subject_code","onSubmitEdit","short_code","Edited_ShortCode","put","modalVisibilityEditSubject","match","params","modalVisibilityAssignClass","BlockSubject","arrLength","JSON","parse","localStorage","getItem","uid","Edited_Subject","errorsForAddSubject","errorsForEditSubject","this","e","target","checked","previousState","index","indexOf","splice","preventDefault","classes","event","columns","title","field","render","isClassAssigned","color","style","cursor","onClick","status","id","visible","onDismiss","scrollable","size","keyboard","listStyle","marginLeft","map","item","type","onChange","handleClassChange","fontSize","name","icon","faTimesCircle","handleAssignClassSubmit","disabled","faSave","formik","className","md","htmlFor","control","placeholder","options","isSubmitting","dirty","isValid","defaultChecked","includes","enableReinitialize","isSubjectExist","faQuestion","isCodeExist","mt","errors","touched","component","onSelectionChange","rows","setSelectedRows","search","paging","filtering","exportButton","actionsColumnIndex","rowStyle","x","tableData","backgroundColor","pageSize","emptyRowsWhenPaging","pageSizeOptions","actions","faPlusCircle","tooltip","isFreeAction","faLock","handleBlockSubject","hidden","faLockOpen","faEdit","sort_code","Component","useState","setVisible","expand","colorScheme","float","fluid","href","variant","popper","Loader","role","TextError","children","connect","rest","switcher","getIn","touch","option","Fragment","label","handleChange","handleBlur","onBlur","selected","setSelected","final","d","EVFormikControl","MultiSelect"],"mappings":"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","file":"static/js/25.3f4716b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CFormLabel,\r\n  CBadge,\r\n  CInputGroup,\r\n  CFormSelect,\r\n} from \"@coreui/react-pro\";\r\nimport {\r\n  faLock,\r\n  faSave,\r\n  faLockOpen,\r\n  faPlusCircle,\r\n  faTimesCircle,\r\n  faEdit,\r\n  faQuestion,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport NavBar from \"../../navbars/ev_super_admin/nav_normal_school\";\r\nimport MaterialTable from \"material-table\";\r\nimport EDU_AXIOS from \"src/helpers/edu_axios\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport notify from \"src/helpers/notify\";\r\nimport EVFormikControl from \"src/ev_formik_controls/EVFormikControl\";\r\nimport Loader from \"src/loader/Loader\";\r\nlet nature = [\r\n  { text: \"Main Subject\", value: \"main\" },\r\n  { text: \"Optional Subject\", value: \"optional\" },\r\n  { text: \"Practical Subject\", value: \"practical\" },\r\n  { text: \"Elective-1\", value: \"elective1\" },\r\n  { text: \"Elective-2\", value: \"elective2\" },\r\n];\r\nclass AllSubjects extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let school_id = this.props.match.params.school_id;\r\n    let s_name = \"\";\r\n    this.state = {\r\n      school_id: school_id,\r\n      subjects: [],\r\n      modalVisibilityAssignClass: false,\r\n      modalVisibilityAddSubject: false,\r\n      modalVisibilityUpdateAssignClass: false,\r\n      modalVisibilityEditSubject: false,\r\n      BlockSubject: \"\",\r\n      subject_name: \"\",\r\n      subject_type: \"\",\r\n      subject_id: \"\",\r\n      ev_classes: [],\r\n      checkedItems: [],\r\n      arrLength: 0,\r\n      assigned_classes: [],\r\n      loggedInUserId: JSON.parse(localStorage.getItem(\"user\")).uid,\r\n      Edited_Subject: \"\",\r\n      Edited_ShortCode: \"\",\r\n      errorsForAddSubject: {},\r\n      errorsForEditSubject: {},\r\n      isShow: false,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // render data into table\r\n    this.getSubjects();\r\n    this.getSections();\r\n  }\r\n\r\n  // get all subjects of school\r\n  getSubjects = () => {\r\n    let { school_id } = this.state;\r\n\r\n    let url = process.env.REACT_APP_API_PATH + \"/sm/get-subjects/\" + school_id;\r\n    EDU_AXIOS.get(url)\r\n      .then((resp) => {\r\n        //console.log(resp.data.data);\r\n        this.setState({ subjects: resp.data.data });\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  getSections = () => {\r\n    let { school_id } = this.state;\r\n    let db_classes = [];\r\n    let url = process.env.REACT_APP_API_PATH + \"/cm/get-sections/\" + school_id;\r\n    EDU_AXIOS.get(url)\r\n      .then((resp) => {\r\n        console.log(resp.data.data);\r\n        if (resp.data.data.length > 0) {\r\n          for (let i = 0; i < resp.data.data.length; i++) {\r\n            for (let j = 0; j < resp.data.data[i].sections.length; j++) {\r\n              console.log(resp.data.data[i].sections[j]);\r\n              db_classes.push(\r\n                resp.data.data[i].class + \"-\" + resp.data.data[i].sections[j]\r\n              );\r\n            }\r\n          }\r\n          this.setState({ ev_classes: db_classes });\r\n          this.setState({ isShow: true });\r\n        } else {\r\n          this.setState({ isShow: false });\r\n        }\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // to update assigned classes\r\n  updateAssignedClasses = (school_id, subject_id) => {\r\n    let url =\r\n      process.env.REACT_APP_API_PATH +\r\n      \"/sm/get-assigned-classes/\" +\r\n      school_id +\r\n      \"/\" +\r\n      subject_id;\r\n    EDU_AXIOS.get(url)\r\n      .then((resp) => {\r\n        //console.log(resp.data.data);\r\n        this.setState({\r\n          assigned_classes: resp.data.data[0].assigned_classes,\r\n          checkedItems: resp.data.data[0].assigned_classes,\r\n          modalVisibilityUpdateAssignClass: true,\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  // hande assignment of the class to subject\r\n  handleClassChange(e) {\r\n    const target = e.target;\r\n    var value = target.value;\r\n    if (target.checked) {\r\n      // add value in array\r\n      this.setState((previousState) => ({\r\n        checkedItems: [...previousState.checkedItems, value],\r\n      }));\r\n      this.setState({ arrLength: this.state.checkedItems.length + 1 });\r\n    } else {\r\n      // remove value from array\r\n      var index = this.state.checkedItems.indexOf(value);\r\n      if (index > -1) {\r\n        this.state.checkedItems.splice(index, 1);\r\n      }\r\n      this.setState({ arrLength: this.state.checkedItems.length });\r\n    }\r\n  }\r\n\r\n  // For Assigning class to Subject\r\n  handleAssignClassSubmit(e) {\r\n    e.preventDefault();\r\n    let school_id = this.state.school_id;\r\n    let subject_id = this.state.subject_id;\r\n    let classes = this.state.checkedItems;\r\n    let self = this;\r\n    EDU_AXIOS.post(\r\n      process.env.REACT_APP_API_PATH + \"/sm/assign-class-to-subject\",\r\n      {\r\n        school_id,\r\n        subject_id,\r\n        classes,\r\n      }\r\n    )\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        self.setState({\r\n          modalVisibilityAssignClass: false,\r\n          modalVisibilityUpdateAssignClass: false,\r\n          checkedItems: [],\r\n        });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // formik params\r\n  initialValues = {\r\n    subject_name: \"\",\r\n    subject_type: \"\",\r\n  };\r\n  // validation rules of the form fields\r\n  validationSchema = Yup.object().shape({\r\n    subject_name: Yup.string().required(\"Subject name is required\"),\r\n    subject_type: Yup.string().required(\"Subject type is required\"),\r\n  });\r\n  // submit form\r\n  onSubmit = (values, { resetForm }) => {\r\n    let subject = values.subject_name;\r\n    let subject_type = values.subject_type;\r\n    let created_by = this.state.loggedInUserId;\r\n    let created_for = this.state.school_id;\r\n    let self = this;\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/create-subject\", {\r\n      subject,\r\n      subject_type,\r\n      created_by,\r\n      created_for,\r\n    })\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        self.setState({ modalVisibilityAddSubject: false });\r\n        resetForm({ values: \"\" });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // formik params\r\n  // validation rules of the form fields\r\n  validationSchemaEdit = Yup.object().shape({\r\n    subject_name: Yup.string().required(\"Subject name is required\"),\r\n    subject_code: Yup.string().required(\"Short code is required\"),\r\n    subject_type: Yup.string().required(\"Subject type is required\"),\r\n  });\r\n  // submit form\r\n  onSubmitEdit = (values) => {\r\n    let subject_id = this.state.subject_id;\r\n    let short_code = this.state.Edited_ShortCode;\r\n    let created_for = this.state.school_id;\r\n    let subject = this.state.subject_name;\r\n    let subject_type = this.state.subject_type;\r\n    console.log(subject_type);\r\n    let self = this;\r\n    EDU_AXIOS.put(process.env.REACT_APP_API_PATH + \"/sm/edit-subject\", {\r\n      subject_id,\r\n      created_for,\r\n      short_code,\r\n      subject,\r\n      subject_type,\r\n    })\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        self.setState({\r\n          modalVisibilityEditSubject: false,\r\n        });\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // to edit subject [Is-Subject-Exist]\r\n\r\n  isSubjectExist(event) {\r\n    event.preventDefault();\r\n\r\n    let subject = this.state.subject_name;\r\n    let created_for = this.state.school_id;\r\n    let self = this;\r\n\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/is-subject-exist\", {\r\n      subject,\r\n      created_for,\r\n    })\r\n      .then((res) => {\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // to edit subject [Is-Code-Exist]\r\n\r\n  isCodeExist(event) {\r\n    event.preventDefault();\r\n\r\n    let short_code = this.state.Edited_ShortCode;\r\n    let created_for = this.state.school_id;\r\n\r\n    let self = this;\r\n\r\n    EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/sm/is-short-code-exist\", {\r\n      short_code,\r\n      created_for,\r\n    })\r\n      .then((res) => {\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // to block subject only for the school\r\n\r\n  handleBlockSubject(event, subject_id) {\r\n    event.preventDefault();\r\n\r\n    let self = this;\r\n    //  alert(subject_id)\r\n    EDU_AXIOS.put(\r\n      process.env.REACT_APP_API_PATH + \"/sm/block-unblock-subject\",\r\n      {\r\n        subject_id: subject_id,\r\n      }\r\n    )\r\n      .then((res) => {\r\n        self.getSubjects();\r\n        notify(\"success\", res.data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      school_id,\r\n      subjects,\r\n      modalVisibilityAssignClass,\r\n      modalVisibilityAddSubject,\r\n      modalVisibilityUpdateAssignClass,\r\n      modalVisibilityEditSubject,\r\n      Edited_ShortCode,\r\n      subject_name,\r\n      subject_type,\r\n      arrLength,\r\n    } = this.state;\r\n\r\n    const columns = [\r\n      {\r\n        title: \"Name\",\r\n        field: \"subject_name\",\r\n      },\r\n      {\r\n        title: \"Subject Code\",\r\n        field: \"sort_code\",\r\n      },\r\n      {\r\n        title: \"Assign Class\",\r\n        field: \"isClassAssigned\",\r\n        render: (data) => {\r\n          if (data.isClassAssigned == false) {\r\n            return (\r\n              <CBadge\r\n                color=\"secondary\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={\r\n                  data.status == \"active\"\r\n                    ? () =>\r\n                        this.setState({\r\n                          modalVisibilityAssignClass: true,\r\n                          subject_id: data.subject_id,\r\n                        })\r\n                    : () => {\r\n                        notify(\"error\", \"Subject is blocked!\");\r\n                      }\r\n                }\r\n              >\r\n                Assign\r\n              </CBadge>\r\n            );\r\n          }\r\n          if (data.isClassAssigned == true) {\r\n            return (\r\n              <CBadge\r\n                color=\"success\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={\r\n                  data.status == \"active\"\r\n                    ? () => {\r\n                        this.updateAssignedClasses(school_id, data.subject_id);\r\n                        this.setState({\r\n                          subject_id: data.subject_id,\r\n                        });\r\n                      }\r\n                    : () => {\r\n                        notify(\"error\", \"Subject is blocked!\");\r\n                      }\r\n                }\r\n              >\r\n                Assigned\r\n              </CBadge>\r\n            );\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        field: \"status\",\r\n        render: (data) => {\r\n          if (data.status == \"active\") {\r\n            return <CBadge color=\"success\">Active</CBadge>;\r\n          }\r\n          if (data.status == \"blocked\") {\r\n            return <CBadge color=\"danger\">Blocked</CBadge>;\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: \"Type\",\r\n        field: \"nature\",\r\n      },\r\n    ];\r\n    return (\r\n      <CCard>\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol>\r\n              <NavBar id={school_id} />\r\n            </CCol>\r\n          </CRow>\r\n          {/*\r\n           * Modal box for assign class\r\n           */}\r\n\r\n          <CModal\r\n            visible={modalVisibilityAssignClass}\r\n            onDismiss={() =>\r\n              this.setState({\r\n                modalVisibilityAssignClass: false,\r\n                checkedItems: [],\r\n              })\r\n            }\r\n            scrollable\r\n            size=\"sm\"\r\n            keyboard={false}\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({\r\n                  modalVisibilityAssignClass: false,\r\n                  checkedItems: [],\r\n                })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Assign Class</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n\r\n            <CModalBody>\r\n              {this.state.isShow && (\r\n                <>\r\n                  <p>Select classes those you want to assign to the subject </p>\r\n                  <form>\r\n                    <ul style={{ listStyle: \"none\", marginLeft: \"-40px\" }}>\r\n                      {this.state.ev_classes.map((item) => (\r\n                        <li>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            value={item}\r\n                            onChange={(e) => this.handleClassChange(e)}\r\n                            id={item}\r\n                            key={item}\r\n                          />\r\n                          <span\r\n                            style={{\r\n                              fontSize: \"16px\",\r\n                              marginLeft: \"15px\",\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                    <input\r\n                      type=\"hidden\"\r\n                      name=\"sub_id\"\r\n                      value={this.state.subject_id}\r\n                    />\r\n                    <br />\r\n                  </form>\r\n                </>\r\n              )}\r\n              {!this.state.isShow && (\r\n                <>\r\n                  <p>\r\n                    Please create classes and at least on section for each class\r\n                  </p>\r\n                </>\r\n              )}\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              <CButton\r\n                color=\"light\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalVisibilityAssignClass: false,\r\n                    checkedItems: [],\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n              </CButton>\r\n              <CButton\r\n                color=\"dark\"\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n                onClick={(e) => this.handleAssignClassSubmit(e)}\r\n                disabled={arrLength < 1}\r\n              >\r\n                <FontAwesomeIcon icon={faSave} /> Save\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CModal>\r\n          {/*End assign class modal*/}\r\n          {/*Modal box to Add a Subject*/}\r\n          <CModal\r\n            visible={modalVisibilityAddSubject}\r\n            onDismiss={() =>\r\n              this.setState({ modalVisibilityAddSubject: false })\r\n            }\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({ modalVisibilityAddSubject: false })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Create Subject</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={this.initialValues}\r\n              validationSchema={this.validationSchema}\r\n              onSubmit={this.onSubmit}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CRow className=\"mb-3\">\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_name\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Name\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_name\"\r\n                          id=\"subject_name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_type\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Type\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"selectwithkey\"\r\n                          name=\"subject_type\"\r\n                          id=\"subject_type\"\r\n                          placeholder=\"Select subject type...\"\r\n                          options={nature}\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      color=\"light\"\r\n                      onClick={() =>\r\n                        this.setState({ modalVisibilityAddSubject: false })\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      value=\"Submit\"\r\n                      disabled={\r\n                        formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                      }\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n          {/*End modal to add subject*/}\r\n          {/*\r\n           * Modal box for update assign class\r\n           */}\r\n\r\n          <CModal\r\n            visible={modalVisibilityUpdateAssignClass}\r\n            onDismiss={() =>\r\n              this.setState({\r\n                modalVisibilityUpdateAssignClass: false,\r\n                checkedItems: [],\r\n              })\r\n            }\r\n            scrollable\r\n            size=\"sm\"\r\n            keyboard={false}\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({\r\n                  modalVisibilityUpdateAssignClass: false,\r\n                  checkedItems: [],\r\n                })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Assign Class</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n\r\n            <CModalBody>\r\n              <p>Select classes those you want to assign to the subject </p>\r\n              <form>\r\n                <ul style={{ listStyle: \"none\", marginLeft: \"-40px\" }}>\r\n                  {this.state.ev_classes.map((item) => (\r\n                    <li>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        value={item}\r\n                        onChange={(e) => this.handleClassChange(e)}\r\n                        id={item}\r\n                        key={item}\r\n                        defaultChecked={\r\n                          this.state.assigned_classes.includes(item)\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"16px\",\r\n                          marginLeft: \"15px\",\r\n                        }}\r\n                      >\r\n                        {item}\r\n                      </span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                <input\r\n                  type=\"hidden\"\r\n                  name=\"sub_id\"\r\n                  value={this.state.subject_id}\r\n                />\r\n                <br />\r\n              </form>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              <CButton\r\n                color=\"light\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalVisibilityUpdateAssignClass: false,\r\n                    checkedItems: [],\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n              </CButton>\r\n              <CButton\r\n                color=\"dark\"\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n                onClick={(e) => this.handleAssignClassSubmit(e)}\r\n                disabled={arrLength < 1}\r\n              >\r\n                <FontAwesomeIcon icon={faSave} /> Save\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CModal>\r\n          {/*End update assign class modal*/}\r\n\r\n          {/* Start of Edit Subject Modal*/}\r\n          <CModal\r\n            visible={modalVisibilityEditSubject}\r\n            onDismiss={() =>\r\n              this.setState({ modalVisibilityEditSubject: false })\r\n            }\r\n          >\r\n            <CModalHeader\r\n              onDismiss={() =>\r\n                this.setState({ modalVisibilityEditSubject: false })\r\n              }\r\n            >\r\n              <CModalTitle>\r\n                <h5>Edit Subject</h5>\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={{\r\n                subject_name: subject_name,\r\n                subject_code: Edited_ShortCode,\r\n                subject_type: subject_type,\r\n              }}\r\n              validationSchema={this.validationSchemaEdit}\r\n              onSubmit={this.onSubmitEdit}\r\n              enableReinitialize={true}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CFormLabel\r\n                      htmlFor=\"subject_name\"\r\n                      className=\"required-field\"\r\n                    >\r\n                      Subject Name\r\n                    </CFormLabel>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CCol md={11}>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_name\"\r\n                          id=\"subject_name\"\r\n                          value={formik.values.subject_name}\r\n                          onChange={({ target }) => {\r\n                            this.setState({ subject_name: target.value });\r\n                          }}\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={1}>\r\n                        <CButton\r\n                          type=\"button\"\r\n                          color=\"dark\"\r\n                          id=\"button-addon2\"\r\n                          onClick={(e) => this.isSubjectExist(e)}\r\n                          data-toggle=\"tooltip\"\r\n                          data-placement=\"top\"\r\n                          title=\"Click to check subject name available or not\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faQuestion} />\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CInputGroup>\r\n                    <CFormLabel\r\n                      htmlFor=\"subject_code\"\r\n                      className=\"required-field\"\r\n                    >\r\n                      Short Code\r\n                    </CFormLabel>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CCol md={11}>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"subject_code\"\r\n                          id=\"subject_code\"\r\n                          value={formik.values.subject_code}\r\n                          onChange={({ target }) => {\r\n                            this.setState({ Edited_ShortCode: target.value });\r\n                          }}\r\n                          placeholder=\"Subject code\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={1}>\r\n                        <CButton\r\n                          type=\"button\"\r\n                          color=\"dark\"\r\n                          id=\"button-addon2\"\r\n                          onClick={(e) => this.isCodeExist(e)}\r\n                          data-toggle=\"tooltip\"\r\n                          data-placement=\"top\"\r\n                          title=\"Click to check short code available or not\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faQuestion} />\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CInputGroup>\r\n                    <CRow mt={3}>\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject_type\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject Type\r\n                        </CFormLabel>\r\n\r\n                        <Field name=\"subject_type\">\r\n                          {({ field }) => (\r\n                            <CFormSelect\r\n                              {...field}\r\n                              value={formik.values.subject_type}\r\n                              onChange={({ target }) => {\r\n                                this.setState({ subject_type: target.value });\r\n                              }}\r\n                              className={`form-control ${\r\n                                formik.errors.subject_type &&\r\n                                formik.touched.subject_type\r\n                                  ? \"is-invalid\"\r\n                                  : \"\"\r\n                              }`}\r\n                            >\r\n                              <option value=\"\">Select...</option>\r\n                              {nature.map((i) => (\r\n                                <option key={i.value} value={i.value}>\r\n                                  {i.text}\r\n                                </option>\r\n                              ))}\r\n                            </CFormSelect>\r\n                          )}\r\n                        </Field>\r\n                        <ErrorMessage\r\n                          name=\"subject_type\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      color=\"light\"\r\n                      onClick={() =>\r\n                        this.setState({ modalVisibilityEditSubject: false })\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      value=\"Submit\"\r\n                      disabled={formik.isSubmitting || !formik.isValid}\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n          {/*Render data into table*/}\r\n          <MaterialTable\r\n            title={\"All Subjects\"}\r\n            data={subjects}\r\n            columns={columns}\r\n            onSelectionChange={(rows) => setSelectedRows(rows)}\r\n            options={{\r\n              search: true,\r\n              paging: true,\r\n              filtering: false,\r\n              exportButton: true,\r\n              actionsColumnIndex: -1,\r\n              rowStyle: (x) => {\r\n                if (x.tableData.id % 2) {\r\n                  return { backgroundColor: \"#f9f9f9\" };\r\n                }\r\n              },\r\n              pageSize: 15,\r\n              emptyRowsWhenPaging: true,\r\n              pageSizeOptions: [15, 30, 45],\r\n            }}\r\n            actions={[\r\n              {\r\n                icon: () => (\r\n                  <CButton\r\n                    color=\"dark\"\r\n                    onClick={() =>\r\n                      this.setState({ modalVisibilityAddSubject: true })\r\n                    }\r\n                  >\r\n                    <FontAwesomeIcon icon={faPlusCircle} /> Add\r\n                  </CButton>\r\n                ),\r\n                tooltip: \"Add Subject\",\r\n                isFreeAction: true,\r\n              },\r\n\r\n              (data) => ({\r\n                icon: () => (\r\n                  <FontAwesomeIcon\r\n                    icon={faLock}\r\n                    style={{ fontSize: \"1rem\" }}\r\n                    onClick={(e) => this.handleBlockSubject(e, data.subject_id)}\r\n                  />\r\n                ),\r\n                tooltip: \"Block Subject\",\r\n                onClick: \"\",\r\n                disabled:\r\n                  data.status === \"active\" &&\r\n                  data.created_for === this.state.school_id\r\n                    ? false\r\n                    : true,\r\n                hidden: data.status != \"active\",\r\n              }),\r\n              (data) => ({\r\n                icon: () => (\r\n                  <FontAwesomeIcon\r\n                    icon={faLockOpen}\r\n                    style={{ fontSize: \"1rem\" }}\r\n                    onClick={(e) => this.handleBlockSubject(e, data.subject_id)}\r\n                  />\r\n                ),\r\n                tooltip: \"Unblock Subject\",\r\n                onClick: \"\",\r\n                disabled:\r\n                  data.status === \"blocked\" &&\r\n                  data.created_for === this.state.school_id\r\n                    ? false\r\n                    : true,\r\n                hidden: data.status === \"active\",\r\n              }),\r\n              (data) => ({\r\n                icon: () => (\r\n                  <FontAwesomeIcon\r\n                    icon={faEdit}\r\n                    style={{ fontSize: \"1rem\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        modalVisibilityEditSubject: true,\r\n                        Edited_ShortCode: data.sort_code,\r\n                        subject_name: data.subject_name,\r\n                        subject_id: data.subject_id,\r\n                        subject_type: data.nature,\r\n                      })\r\n                    }\r\n                  />\r\n                ),\r\n                tooltip: \"Edit Subject\",\r\n                onClick: \"\",\r\n                disabled:\r\n                  data.status === \"active\" &&\r\n                  data.created_for === this.state.school_id\r\n                    ? false\r\n                    : true,\r\n              }),\r\n            ]}\r\n          />\r\n          {/*End table*/}\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllSubjects;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CNavbar,\r\n  CNavbarToggler,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CContainer,\r\n  CCollapse,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n} from \"@coreui/react-pro\";\r\nexport default (props) => {\r\n  let id = props.id;\r\n  const [visible, setVisible] = useState(false);\r\n  return (\r\n    <>\r\n      <CNavbar\r\n        expand=\"\"\r\n        colorScheme=\"light\"\r\n        className=\"bg-secondry\"\r\n        style={{ float: \"right\" }}\r\n      >\r\n        <CContainer fluid>\r\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              <a color=\"secondary\" className=\"btn btn-default\"  href={`/#/school-management/get-users/${id}`}>User Management</a>\r\n            {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n            <CDropdownToggle color=\"secondary\" >\r\n                 User Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/user-management/${id}`}\r\n                  >\r\n                   Add Users\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/get-users/${id}`}\r\n                  >\r\n                   get Users\r\n                  </CDropdownItem>\r\n                  </CDropdownMenu>\r\n                  </CDropdown> */}\r\n                  <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\" >\r\n                  Class Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-classes/${id}`}\r\n                  >\r\n                    Create/Edit Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/view-classes/${id}`}\r\n                  >\r\n                    View Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-sections/${id}`}\r\n                  >\r\n                    Create Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/manage-sections/${id}`}\r\n                  >\r\n                    Manage Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                    Class Mapping\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Subject Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Add Subject\r\n                  </CDropdownItem> */}\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Assign Subject To Class\r\n                  </CDropdownItem>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                    All Subjects\r\n                  </CDropdownItem> */}\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n         \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Teacher Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                    Add Teacher\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Section Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Academic Calendar Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Academic Year\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Holiday calendar & holiday list\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    Exam calendar\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Lesson Planning\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/lesson-management/get-subjects/${id}`}\r\n                  >\r\n                   Annual Lesson Plan\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Class Structure Creation\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Constraints management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                 School level constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Class wise constraints (inflow from class teacher)\r\n                  </CDropdownItem>\r\n                 \r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n            \r\n             \r\n              {/*<CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Student Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Students</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Subjects</CDropdownItem>\r\n                </CDropdownMenu>\r\n  </CDropdown>*/}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Calender Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/add-holiday/${id}`}\r\n                  >\r\n                    Add Holiday\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/view-calender/${id}`}\r\n                  >\r\n                    View Calender\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n          \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">Time Table</CDropdownToggle>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Data fitness – system checks the fitness of data\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */} \r\n               \r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Generate Annual Timetable\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                <CDropdownMenu>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Update weekly time table.\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                  <CDropdownItem href={`/#/time-table-management/step-1/${id}`}>\r\n                    Time Table (Initialization)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/time-table-list/${id}`}\r\n                  >\r\n                    Time Table List\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>\r\n                    General Constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>Class Constraints</CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/create-time-table-admin/${id}`}\r\n                  >\r\n                    Generate Time Table (Admin)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/generate-time-table-school/${id}`}\r\n                  >\r\n                    Generate Time Table (School)\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return <div className=\"spinner-border spinner-border-sm\" role=\"status\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nfunction TextError(props) {\r\n  return <div className=\"invalid-feedback\">{props.children}</div>;\r\n}\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst CheckBox = (props) => {\r\n  const { formik, name, options, switcher, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={\r\n                    field.value ? field.value.includes(option.value) : \"\"\r\n                  }\r\n                  label={option.text}\r\n                  disabled={option.disabled ? option.disabled : false}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}\r\n                  }`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(CheckBox);\r\n","import React from \"react\";\r\nimport { CFormInput } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Input(props) {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <CFormInput\r\n        id={id}\r\n        name={name}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        {...rest}\r\n        className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n      />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(Input);\r\n","import React, { useState } from \"react\";\r\nimport { CMultiSelect } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn, useField } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Multiselect = (props) => {\r\n  let { formik, name, id, options, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  const [selected, setSelected] = useState([]);\r\n  let final = [];\r\n  return (\r\n    <>\r\n      <Field name={name} id={id} onChange={handleChange} onBlur={handleBlur}>\r\n        {({ field }) => {\r\n          selected.map((d) => {\r\n            final.push(d.value);\r\n            return final;\r\n          });\r\n          formik.values[`${name}`] = final;\r\n\r\n          return (\r\n            <CMultiSelect\r\n              {...field}\r\n              {...rest}\r\n              options={options}\r\n              onChange={setSelected}\r\n              className={`form-control  ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Multiselect);\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst RadioButton = (props) => {\r\n  const { formik, name, options, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  type=\"radio\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value === option.value}\r\n                  label={option.text}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(RadioButton);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Select = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Select);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst SelectWithKey = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.text}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(SelectWithKey);\r\n","import React from \"react\";\r\nimport { CFormTextarea } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Textarea = (props) => {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormTextarea\r\n              id={id}\r\n              name={name}\r\n              {...field}\r\n              {...rest}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Textarea);\r\n","import React from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport Input from \"./Input\";\r\nimport MultiSelect from \"./MultiSelect\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Select from \"./Select\";\r\nimport SelectWithKey from \"./SelectWithKey\";\r\nimport Textarea from \"./Textarea\";\r\nfunction EVFormikControl(props) {\r\n  const { control, ...rest } = props;\r\n  switch (control) {\r\n    case \"input\":\r\n      return <Input {...rest} />;\r\n    case \"textarea\":\r\n      return <Textarea {...rest} />;\r\n    case \"select\":\r\n      return <Select {...rest} />;\r\n    case \"selectwithkey\":\r\n      return <SelectWithKey {...rest} />;\r\n    case \"multiselect\":\r\n      return <MultiSelect {...rest} />;\r\n    case \"radio\":\r\n      return <RadioButton {...rest} />;\r\n    case \"checkbox\":\r\n      return <CheckBox {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default EVFormikControl;\r\n"],"sourceRoot":""}