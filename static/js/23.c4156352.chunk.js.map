{"version":3,"sources":["views/ev_super_admin/class_management/sections.js","views/ev_super_admin/class_management/class_mapping.js","views/navbars/ev_super_admin/nav_normal_school.js","loader/Loader.js","ev_formik_controls/TextError.js","ev_formik_controls/CheckBox.js","ev_formik_controls/Input.js","ev_formik_controls/MultiSelect.js","ev_formik_controls/RadioButton.js","ev_formik_controls/Select.js","ev_formik_controls/SelectWithKey.js","ev_formik_controls/Textarea.js","ev_formik_controls/EVFormikControl.js"],"names":["Sections","className","school_id","newsections","teacher_id","subject_name","useState","sections","setSections","disabled","setDisabled","data","useEffect","EDU_AXIOS","get","process","then","response","push","catch","error","console","log","changesectionchecbox","val","event","index","a","target","checked","i","length","splice","update","select_all","section_name","post","c_class","c_subject","res","notify","message","err","setSelectall","type","onChange","map","item","value","find","element","onClick","style","marginLeft","position","class_mapping","props","match","params","visible","setVisible","teacherList","setTeacherList","teacherName","setTeacherName","teacherDList","setTeacherDList","visibleDetail","setVisibleDetail","classNames","setClassName","subjectName","setSubjectName","setTeacherId","getDetail","name","teacherId","class_name","showManageModal","d","text","initialValues","c_class_name","c_sections","validationSchema","Yup","shape","required","min","of","trim","onSubmit","values","resetForm","id","md","lg","xl","el","row","class","content","color","textAlign","Record","record","height","paddingTop","paddingBottom","backgroundColor","striped","scope","t","s","display","icon","faCog","showDetail","size","onDismiss","formik","htmlFor","EVFormikControl","control","placeholder","options","inline","block","faTimesCircle","isSubmitting","dirty","isValid","Loader","faSave","expand","colorScheme","float","fluid","href","variant","popper","role","TextError","children","connect","rest","switcher","getIn","errors","touch","touched","field","option","Fragment","includes","label","component","handleChange","handleBlur","onBlur","selected","setSelected","final","MultiSelect"],"mappings":"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","file":"static/js/23.c4156352.chunk.js","sourcesContent":["import { ListItemSecondaryAction } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport EDU_AXIOS from 'src/helpers/edu_axios';\r\nimport notify from 'src/helpers/notify';\r\nimport Checksections from './checksections';\r\n\r\nexport default function Sections({className,school_id,newsections,teacher_id,subject_name}) {\r\n    let [sections, setSections] = useState([]);\r\n    let [disabled, setDisabled] = useState(true);\r\n   let data=[];\r\n   \r\n    useEffect(() => {\r\n        EDU_AXIOS.get(\r\n            `${process.env.REACT_APP_API_PATH}/cm/get-sections-by-class/${school_id}/${className}`\r\n          )\r\n            .then((response) => {\r\n              \r\n              setSections(response.data.data);\r\n             data.push(sections);\r\n          //   console.log(newsections)\r\n              // console.log(\"data\")\r\n              // console.log(newsections)\r\n            })\r\n            .catch((error) => {\r\n            \r\n              console.log(error);\r\n            });\r\n    })\r\n\r\n    const changesectionchecbox=async(val,event,index)=>{\r\n  setDisabled(false)\r\n        if(event.target.checked==false){\r\n       for(var i=0;i<newsections.length;i++){\r\n           //alert(newsections[i])\r\n           if(newsections[i]==val){\r\n               newsections.splice(i,1);\r\n               break;\r\n           }\r\n       }\r\n    }\r\n    else{\r\n        newsections.push(val);\r\n    }\r\n        //alert(newsections);\r\n       \r\n    }\r\n    const update = async()=>{\r\n      if(select_all==true){\r\n        console.log(\"select all is true\")\r\n        console.log(sections);\r\n        newsections=[];\r\n        for(var i=0;i<sections.length;i++){\r\n               newsections.push(sections[i].section_name);\r\n        }\r\n      }\r\n     // alert('ok')\r\n     if(newsections!='')\r\n     {\r\n      await EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/cm/class-mapping\", {\r\n        school_id: school_id,\r\n        teacher_id: teacher_id,\r\n        c_class: className,\r\n        c_subject: subject_name,\r\n        sections: newsections,\r\n      })\r\n        .then(async (res) => {\r\n        //   resetForm({ values: \"\" });\r\n          notify(\"success\", res.data.message);\r\n          setDisabled(true);\r\n        //   setVisible(false);\r\n        //   getDetail(classNames, teacher_id);\r\n      //  alert(\"data updated successfuly\");\r\n        })\r\n        .catch((err) => {\r\n          notify(\"error\", err);\r\n        });\r\n      }\r\n      else{\r\n        await EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/cm/class-mapping\", {\r\n          school_id: school_id,\r\n          teacher_id: teacher_id,\r\n          c_class: className,\r\n          c_subject: subject_name,\r\n          sections: sections,\r\n        })\r\n          .then(async (res) => {\r\n          //   resetForm({ values: \"\" });\r\n            notify(\"success\", res.data.message);\r\n            setDisabled(true);\r\n          //   setVisible(false);\r\n          //   getDetail(classNames, teacher_id);\r\n        //  alert(\"data updated successfuly\");\r\n          })\r\n          .catch((err) => {\r\n            notify(\"error\", err);\r\n          });\r\n      }\r\n    }\r\n\r\n    const [select_all, setSelectall] = useState(false)\r\n    const selectall = ()=>{\r\n           setSelectall(true);\r\n           setDisabled(false);\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n      <input type=\"checkbox\" onChange={()=>selectall()} />   Select All &nbsp;\r\n                    \r\n    {\r\n\r\n        sections.map((item,index)=>(\r\n         //start\r\n\r\n         newsections==''?  <>\r\n         {\r\n           select_all==true? <input type=\"checkbox\" value={item.section_name} onChange={(event)=>changesectionchecbox(event.target.value,event,index)} checked></input>\r\n        :<input type=\"checkbox\" value={item.section_name} onChange={(event)=>changesectionchecbox(event.target.value,event,index)}>\r\n        </input>\r\n         }  \r\n        \r\n          \r\n          <label>{item.section_name}</label>\r\n          </>\r\n          :\r\n\r\n            newsections.find(element => element==item.section_name || select_all==true)?\r\n         <>\r\n          \r\n           <input type=\"checkbox\" value={item.section_name} onChange={(event)=>changesectionchecbox(event.target.value,event,index)} checked>\r\n          \r\n           </input>\r\n           \r\n           <label>{item.section_name}</label>\r\n         </>\r\n           :\r\n           <>\r\n           \r\n            <input type=\"checkbox\" value={item.section_name} onChange={(event)=>changesectionchecbox(event.target.value,event,index)}>\r\n           \r\n             </input> \r\n             <label>{item.section_name}</label>\r\n             </>\r\n          \r\n    // end\r\n         \r\n        ))\r\n       \r\n        \r\n    }\r\n    {\r\n     \r\n <button onClick={update} style={{marginLeft:\" 194px\",\r\n  position: \"absolute\"}} disabled={disabled}>Update</button>\r\n    }\r\n   \r\n {/* {\r\n     sections.map((item)=>{\r\n     return    <p>{item.section_name}</p>\r\n     })\r\n } */}\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CRow,\r\n  CFormLabel,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CTooltip,\r\n  CTable,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHeaderCell,\r\n} from \"@coreui/react-pro\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"../../navbars/ev_super_admin/nav_normal_school\";\r\nimport {\r\n  faCog,\r\n  faTimesCircle,\r\n  faSave,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Loader from \"src/loader/Loader\";\r\nimport EVFormikControl from \"src/ev_formik_controls/EVFormikControl\";\r\nimport EDU_AXIOS from \"src/helpers/edu_axios\";\r\nimport notify from \"src/helpers/notify\";\r\nimport Sections from \"./sections\";\r\n\r\nconst class_mapping = (props) => {\r\n  let school_id = props.match.params.school_id;\r\n  let [visible, setVisible] = useState(false);\r\n  let [teacherList, setTeacherList] = useState([]);\r\n  let [teacherName, setTeacherName] = useState();\r\n  let [teacherDList, setTeacherDList] = useState([]);\r\n  let [visibleDetail, setVisibleDetail] = useState(false);\r\n  let [classNames, setClassName] = useState();\r\n  let [subjectName, setSubjectName] = useState();\r\n  let [sections, setSections] = useState([]);\r\n  let [teacher_id, setTeacherId] = useState();\r\n  useEffect(() => {\r\n    EDU_AXIOS.get(\r\n      `${process.env.REACT_APP_API_PATH}/tm/get-teachers-by-school/${school_id}`\r\n    )\r\n      .then((response) => {\r\n        setTeacherList(response.data.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  let Record = () => {\r\n    let el = [];\r\n    el.push(\r\n      <CCol md={12}>\r\n        <h5>Teachers</h5>\r\n      </CCol>\r\n    );\r\n    if (!!teacherList && teacherList.length > 0) {\r\n      for (let i = 0; i < teacherList.length; i++) {\r\n        let row = [];\r\n        row.push(\r\n          <CCol md={12} key={teacherList[i].teacher_id}>\r\n            <div class=\"d-grid gap-2\">\r\n              <CTooltip content=\"View Teacher\">\r\n                <CButton\r\n                  color=\"light\"\r\n                  className=\"mb-2\"\r\n                  onClick={() => {\r\n                    getDetail(teacherList[i].name, teacherList[i].teacher_id);\r\n                  }}\r\n                >\r\n                  {teacherList[i].name}\r\n                </CButton>\r\n              </CTooltip>\r\n            </div>\r\n          </CCol>\r\n        );\r\n        el.push(row);\r\n      }\r\n    } else {\r\n      el.push(\r\n        <CCol md={12} style={{ textAlign: \"center\" }}>\r\n          No record found...\r\n        </CCol>\r\n      );\r\n    }\r\n    return el;\r\n  };\r\n\r\n  // get sections by class\r\n  let getDetail = (name, teacherId) => {\r\n    setTeacherName(name);\r\n    setTeacherId(teacherId);\r\n    console.log(\"test\");\r\n    EDU_AXIOS.get(\r\n      `${process.env.REACT_APP_API_PATH}/cm/get-mapping/${teacherId}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data.data[0][0].class_name)\r\n        setTeacherDList(response.data.data);\r\n        setVisibleDetail(true);\r\n      })\r\n      .catch((error) => {\r\n        setTeacherDList([]);\r\n        setVisibleDetail(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n  // show sections\r\n  let showDetail = () => {\r\n    console.log(\"show details\")\r\n    let record = [];\r\n    record.push(\r\n      <CRow>\r\n        <CCol\r\n          md={12}\r\n          style={{\r\n            height: \"50px\",\r\n            paddingTop: \"10px\",\r\n            paddingBottom: \"10px\",\r\n            backgroundColor: \"#EBEDEF\",\r\n          }}\r\n        >\r\n          <b> {teacherName} </b>\r\n        </CCol>\r\n      </CRow>\r\n    );\r\n    if (teacherDList.length != []) {\r\n      record.push(\r\n        <CRow className=\"mt-2\">\r\n          <CCol md={12}>\r\n            <CTable striped>\r\n              <CTableHead color=\"dark\">\r\n                <CTableRow>\r\n                \r\n                  <CTableHeaderCell scope=\"col\">Subject</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Class</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Section</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {teacherDList.map((t) => {\r\n                  return t.map((s) => {\r\n                    return (\r\n                      <CTableRow key={s.subject_name + \"_\" + s.class_name}>\r\n                       \r\n                        <CTableDataCell>{s.subject_name}</CTableDataCell>\r\n                        <CTableDataCell>{s.class_name}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                         <Sections \r\n                          className={s.class_name}\r\n                          school_id={school_id}\r\n                          newsections={s.sections}\r\n                          teacher_id={teacher_id}\r\n                          subject_name={s.subject_name}\r\n                          \r\n\r\n                          >\r\n                            </Sections>\r\n                          {/* {s.sections.toString().split().join(\",\")} */}\r\n                          {/* <div> {\r\n                            s.sections.map((items)=>{\r\n                              return <>\r\n                              \r\n                                <span> <input type=\"checkbox\" value={items} onChange={(event)=>setSectionss(event.target.value)}></input> {items}</span>\r\n                                </>\r\n                            })\r\n                          }\r\n                           </div> */}\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <CTooltip content=\"manage\">\r\n                            <CButton\r\n                            style={{display:\"none\"}}\r\n                              color=\"light\"\r\n                              onClick={() => {\r\n                                showManageModal(s.subject_name, s.class_name);\r\n                              }}\r\n                            >\r\n                              <FontAwesomeIcon icon={faCog} />\r\n                            </CButton>\r\n                          </CTooltip>\r\n                        </CTableDataCell>\r\n                      </CTableRow>\r\n                    );\r\n                  });\r\n                })}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCol>\r\n        </CRow>\r\n      );\r\n    } else {\r\n      <CRow className=\"mt-2\">\r\n        <CCol md={12} style={{ textAlign: \"center\" }}>\r\n          No record found\r\n        </CCol>\r\n      </CRow>;\r\n    }\r\n\r\n    return record;\r\n  };\r\n  // manage mapping\r\n\r\n  const setSectionss=(val)=>{\r\n    alert(val);\r\n  }\r\n\r\n  let showManageModal = (subjectName, className) => {\r\n    EDU_AXIOS.get(\r\n      `${process.env.REACT_APP_API_PATH}/cm/get-sections-by-class/${school_id}/${className}`\r\n    )\r\n      .then((response) => {\r\n        setSubjectName(subjectName);\r\n        setClassName(className);\r\n        setVisible(true);\r\n        let data = response.data.data.map((d) => {\r\n          return {\r\n            text: d.section_name,\r\n            value: d.section_name,\r\n          };\r\n        });\r\n        setSections(data);\r\n      })\r\n      .catch((error) => {\r\n        setVisible(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n  // formik params\r\n  const initialValues = {\r\n    c_subject: subjectName,\r\n    c_class_name: classNames,\r\n    c_sections: [],\r\n  };\r\n\r\n  // validation rules of the form fields\r\n  const validationSchema = Yup.object().shape({\r\n    c_subject: Yup.string().required(\"Subject is required\"),\r\n    c_class_name: Yup.string().required(\"Class name is required\"),\r\n    sections: Yup.array().min(1).of(Yup.string().trim().required()),\r\n  });\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    await EDU_AXIOS.post(process.env.REACT_APP_API_PATH + \"/cm/class-mapping\", {\r\n      school_id: school_id,\r\n      teacher_id: teacher_id,\r\n      c_class: classNames,\r\n      c_subject: subjectName,\r\n      sections: values.sections,\r\n    })\r\n      .then(async (res) => {\r\n        resetForm({ values: \"\" });\r\n        notify(\"success\", res.data.message);\r\n        setVisible(false);\r\n        getDetail(classNames, teacher_id);\r\n      })\r\n      .catch((err) => {\r\n        notify(\"error\", err);\r\n      });\r\n  };\r\n  return (\r\n    <CCardGroup>\r\n      <CCard className=\"p-2\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol>\r\n              <NavBar id={school_id} />\r\n            </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol md=\"8\" lg=\"6\" xl=\"8\">\r\n              <h5>Class Mapping</h5>\r\n            </CCol>\r\n          </CRow>\r\n          <p className=\"text-muted\">Teacher class mapping</p>\r\n          <CRow>\r\n            <CCol md={2}>{Record()}</CCol>\r\n            <CCol md={10}>{visibleDetail && showDetail()}</CCol>\r\n          </CRow>\r\n          {/*Manage Section Modal box*/}\r\n          <CModal\r\n            size=\"lg\"\r\n            visible={visible}\r\n            onDismiss={() => setVisible(false)}\r\n          >\r\n            <CModalHeader onDismiss={() => setVisible(false)}>\r\n              <CModalTitle>Class Mapping [ {teacherName} ]</CModalTitle>\r\n            </CModalHeader>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => (\r\n                <Form className=\"row g-3\">\r\n                  <CModalBody>\r\n                    <CRow>\r\n                      <CCol md={6}>\r\n                        <CFormLabel\r\n                          htmlFor=\"subject\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Subject\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"c_subject\"\r\n                          id=\"c_subject\"\r\n                          value={formik.values.c_subject}\r\n                          disabled={true}\r\n                          placeholder=\"Subject\"\r\n                        />\r\n                      </CCol>\r\n                      <CCol md={6}>\r\n                        <CFormLabel\r\n                          htmlFor=\"class_name\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Class\r\n                        </CFormLabel>\r\n                        <EVFormikControl\r\n                          control=\"input\"\r\n                          type=\"text\"\r\n                          name=\"c_class_name\"\r\n                          id=\"c_class_name\"\r\n                          value={formik.values.c_class_name}\r\n                          disabled={true}\r\n                          placeholder=\"Class\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"mt-2\">\r\n                      <CCol md={12}>\r\n                        <CFormLabel\r\n                          htmlFor=\"c_sections\"\r\n                          className=\"required-field\"\r\n                        >\r\n                          Sections\r\n                        </CFormLabel>\r\n                        <br />\r\n                        <EVFormikControl\r\n                          control=\"checkbox\"\r\n                          name=\"sections\"\r\n                          id=\"sections\"\r\n                          options={sections}\r\n                          inline\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CModalBody>\r\n                  <CModalFooter>\r\n                    <CButton\r\n                      block\r\n                      color=\"light\"\r\n                      onClick={() => setVisible(false)}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} /> Cancel\r\n                    </CButton>\r\n                    <CButton\r\n                      block\r\n                      color=\"dark\"\r\n                      type=\"submit\"\r\n                      disabled={\r\n                        formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                      }\r\n                      style={{ marginLeft: \"15px\" }}\r\n                    >\r\n                      {formik.isSubmitting ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <>\r\n                          <FontAwesomeIcon icon={faSave} /> Save\r\n                        </>\r\n                      )}\r\n                    </CButton>\r\n                  </CModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </CModal>\r\n\r\n          {/*End Manage section modal box*/}\r\n        </CCardBody>\r\n      </CCard>\r\n    </CCardGroup>\r\n  );\r\n};\r\n\r\nexport default class_mapping;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CNavbar,\r\n  CNavbarToggler,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CContainer,\r\n  CCollapse,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n} from \"@coreui/react-pro\";\r\nexport default (props) => {\r\n  let id = props.id;\r\n  const [visible, setVisible] = useState(false);\r\n  return (\r\n    <>\r\n      <CNavbar\r\n        expand=\"\"\r\n        colorScheme=\"light\"\r\n        className=\"bg-secondry\"\r\n        style={{ float: \"right\" }}\r\n      >\r\n        <CContainer fluid>\r\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              <a color=\"secondary\" className=\"btn btn-default\"  href={`/#/school-management/get-users/${id}`}>User Management</a>\r\n            {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n            <CDropdownToggle color=\"secondary\" >\r\n                 User Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/user-management/${id}`}\r\n                  >\r\n                   Add Users\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/get-users/${id}`}\r\n                  >\r\n                   get Users\r\n                  </CDropdownItem>\r\n                  </CDropdownMenu>\r\n                  </CDropdown> */}\r\n                  <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\" >\r\n                  Class Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-classes/${id}`}\r\n                  >\r\n                    Create/Edit Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/view-classes/${id}`}\r\n                  >\r\n                    View Classes\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/create-sections/${id}`}\r\n                  >\r\n                    Create Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/manage-sections/${id}`}\r\n                  >\r\n                    Manage Sections\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                    Class Mapping\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Subject Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Add Subject\r\n                  </CDropdownItem> */}\r\n                  <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                   Assign Subject To Class\r\n                  </CDropdownItem>\r\n                  {/* <CDropdownItem\r\n                    href={`/#/school-management/normal-school/all-subjects/${id}`}\r\n                  >\r\n                    All Subjects\r\n                  </CDropdownItem> */}\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n         \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Teacher Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                    Add Teacher\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Section Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/class-management/class-mapping/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Academic Calendar Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Academic Year\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                  Holiday calendar & holiday list\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    Exam calendar\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Lesson Planning\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/lesson-management/get-subjects/${id}`}\r\n                  >\r\n                   Annual Lesson Plan\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                 Class Structure Creation\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Constraints management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                 School level constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Class wise constraints (inflow from class teacher)\r\n                  </CDropdownItem>\r\n                 \r\n                </CDropdownMenu>\r\n              </CDropdown> */}\r\n            \r\n             \r\n              {/*<CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Student Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Students</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Building Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem href=\"#\">All Subjects</CDropdownItem>\r\n                </CDropdownMenu>\r\n  </CDropdown>*/}\r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                  Calender Management\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/add-holiday/${id}`}\r\n                  >\r\n                    Add Holiday\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/calender-management/view-calender/${id}`}\r\n                  >\r\n                    View Calender\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n          \r\n              <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">Time Table</CDropdownToggle>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Data fitness – system checks the fitness of data\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown> */} \r\n               \r\n              {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Generate Annual Timetable\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                <CDropdownMenu>\r\n                {/* <CDropdown variant=\"nav-item\" popper={false}>\r\n                <CDropdownToggle color=\"secondary\">\r\n                Update weekly time table.\r\n                </CDropdownToggle>\r\n                {/* <CDropdownMenu>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Assign class teacher – Primary & secondary\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/add-teacher/${id}`}\r\n                  >\r\n                   Teacher & class mapping\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/teacher-management/get-teachers/${id}`}\r\n                  >\r\n                    All Teachers\r\n                  </CDropdownItem>\r\n                </CDropdownMenu> */}\r\n              {/* </CDropdown>  */}\r\n                  <CDropdownItem href={`/#/time-table-management/step-1/${id}`}>\r\n                    Time Table (Initialization)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/time-table-list/${id}`}\r\n                  >\r\n                    Time Table List\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>\r\n                    General Constraints\r\n                  </CDropdownItem>\r\n                  <CDropdownItem href={`/#/time-table-management/step-2/${id}`}>Class Constraints</CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/create-time-table-admin/${id}`}\r\n                  >\r\n                    Generate Time Table (Admin)\r\n                  </CDropdownItem>\r\n                  <CDropdownItem\r\n                    href={`/#/time-table-management/generate-time-table-school/${id}`}\r\n                  >\r\n                    Generate Time Table (School)\r\n                  </CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return <div className=\"spinner-border spinner-border-sm\" role=\"status\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nfunction TextError(props) {\r\n  return <div className=\"invalid-feedback\">{props.children}</div>;\r\n}\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst CheckBox = (props) => {\r\n  const { formik, name, options, switcher, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={\r\n                    field.value ? field.value.includes(option.value) : \"\"\r\n                  }\r\n                  label={option.text}\r\n                  disabled={option.disabled ? option.disabled : false}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}\r\n                  }`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(CheckBox);\r\n","import React from \"react\";\r\nimport { CFormInput } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Input(props) {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <CFormInput\r\n        id={id}\r\n        name={name}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        {...rest}\r\n        className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n      />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(Input);\r\n","import React, { useState } from \"react\";\r\nimport { CMultiSelect } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn, useField } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Multiselect = (props) => {\r\n  let { formik, name, id, options, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  const [selected, setSelected] = useState([]);\r\n  let final = [];\r\n  return (\r\n    <>\r\n      <Field name={name} id={id} onChange={handleChange} onBlur={handleBlur}>\r\n        {({ field }) => {\r\n          selected.map((d) => {\r\n            final.push(d.value);\r\n            return final;\r\n          });\r\n          formik.values[`${name}`] = final;\r\n\r\n          return (\r\n            <CMultiSelect\r\n              {...field}\r\n              {...rest}\r\n              options={options}\r\n              onChange={setSelected}\r\n              className={`form-control  ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Multiselect);\r\n","import React from \"react\";\r\nimport { CFormCheck } from \"@coreui/react-pro\";\r\nimport { connect, Field, ErrorMessage, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nconst RadioButton = (props) => {\r\n  const { formik, name, options, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <CFormCheck\r\n                  type=\"radio\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value === option.value}\r\n                  label={option.text}\r\n                  className={`${error && touch ? \"is-invalid\" : \"\"}`}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(RadioButton);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Select = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Select);\r\n","import React from \"react\";\r\nimport { CFormSelect } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst SelectWithKey = (props) => {\r\n  const { formik, name, options, id, placeholder, ...rest } = props;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormSelect\r\n              id={id}\r\n              name={name}\r\n              {...rest}\r\n              {...field}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            >\r\n              <option value=\"\">\r\n                {\" \"}\r\n                {placeholder ? placeholder : \"Select...\"}\r\n              </option>\r\n              {options.map((option) => {\r\n                return (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.text}\r\n                  </option>\r\n                );\r\n              })}\r\n            </CFormSelect>\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(SelectWithKey);\r\n","import React from \"react\";\r\nimport { CFormTextarea } from \"@coreui/react-pro\";\r\nimport { connect, ErrorMessage, Field, getIn } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst Textarea = (props) => {\r\n  const { formik, name, id, ...rest } = props;\r\n  const { handleChange, handleBlur } = formik;\r\n  const error = getIn(formik.errors, name);\r\n  const touch = getIn(formik.touched, name);\r\n  return (\r\n    <>\r\n      <Field name={name} {...rest}>\r\n        {({ field }) => {\r\n          return (\r\n            <CFormTextarea\r\n              id={id}\r\n              name={name}\r\n              {...field}\r\n              {...rest}\r\n              className={`form-control ${error && touch ? \"is-invalid\" : \"\"}`}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(Textarea);\r\n","import React from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport Input from \"./Input\";\r\nimport MultiSelect from \"./MultiSelect\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Select from \"./Select\";\r\nimport SelectWithKey from \"./SelectWithKey\";\r\nimport Textarea from \"./Textarea\";\r\nfunction EVFormikControl(props) {\r\n  const { control, ...rest } = props;\r\n  switch (control) {\r\n    case \"input\":\r\n      return <Input {...rest} />;\r\n    case \"textarea\":\r\n      return <Textarea {...rest} />;\r\n    case \"select\":\r\n      return <Select {...rest} />;\r\n    case \"selectwithkey\":\r\n      return <SelectWithKey {...rest} />;\r\n    case \"multiselect\":\r\n      return <MultiSelect {...rest} />;\r\n    case \"radio\":\r\n      return <RadioButton {...rest} />;\r\n    case \"checkbox\":\r\n      return <CheckBox {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default EVFormikControl;\r\n"],"sourceRoot":""}